{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSehat Nabha is a comprehensive rural healthcare platform that bridges the gap between rural communities and modern medical services. The application provides telemedicine capabilities, health record management, medicine availability tracking, and AI-powered symptom checking to make healthcare accessible in remote areas. Built as a full-stack web application with multilingual support (Hindi, Punjabi, English), it addresses the unique challenges of rural healthcare delivery through technology.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript, using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state and React Context for global state (auth, language)\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS\n- **Authentication**: Firebase Authentication with Google OAuth integration\n- **Real-time Communication**: WebSocket implementation for video consultations and live features\n- **Offline Support**: IndexedDB-based offline storage for health records, appointments, and medicines\n- **Multilingual**: Complete i18n support for Hindi, Punjabi, and English\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Real-time**: WebSocket server integration with HTTP server\n- **API Integration**: EndlessMedical API for free medical diagnosis and symptom analysis\n- **Development**: Vite middleware integration for seamless development experience\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon with connection pooling\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Offline Storage**: Browser IndexedDB for offline-first capabilities\n- **File Storage**: Firebase Storage for profile pictures and medical documents\n- **Session Management**: Express sessions with PostgreSQL store\n\n## Authentication and Authorization\n- **Primary Auth**: Firebase Authentication with Google OAuth\n- **User Management**: Custom user profiles stored in PostgreSQL linked via Firebase UID\n- **Role-Based Access**: Patient and doctor roles with different permissions\n- **Session Handling**: Server-side session management for API security\n- **Auto-provisioning**: Automatic user creation on first login\n\n## External Service Integrations\n- **AI Diagnosis**: EndlessMedical API for free medical symptom analysis and diagnosis suggestions\n- **Video Calls**: WebRTC implementation for peer-to-peer video consultations\n- **Maps/Location**: Integrated pharmacy location services\n- **Emergency Services**: Direct integration with emergency helpline (108)\n- **Push Notifications**: Browser-based notifications for appointments and health alerts\n\nThe architecture follows a modern full-stack pattern with offline-first capabilities, real-time communication, and comprehensive healthcare-specific features designed for rural accessibility and multilingual support.","size_bytes":3221},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertDoctorSchema, insertAppointmentSchema, insertHealthRecordSchema, insertSymptomCheckSchema } from \"@shared/schema\";\n// EndlessMedical API - Free medical diagnosis API\n// Documentation: https://www.endlessmedical.com/about-endlessmedical-api/\n\n// EndlessMedical API Base URL\nconst ENDLESSMEDICAL_API_BASE = 'https://endlessmedical.com/v1/dx';\n\n// Helper function to call EndlessMedical API\nasync function callEndlessMedicalAPI(endpoint: string, params: Record<string, string> = {}) {\n  const url = new URL(`${ENDLESSMEDICAL_API_BASE}/${endpoint}`);\n  Object.entries(params).forEach(([key, value]) => {\n    url.searchParams.append(key, value);\n  });\n\n  const response = await fetch(url.toString());\n  if (!response.ok) {\n    throw new Error(`EndlessMedical API error: ${response.statusText}`);\n  }\n  return response.json();\n}\n\n// Analyze symptoms using EndlessMedical API\nasync function analyzeWithEndlessMedical(symptoms: string[]) {\n  try {\n    // Step 1: Initialize session\n    const sessionResponse = await callEndlessMedicalAPI('InitSession');\n    const sessionId = sessionResponse.SessionID;\n\n    if (!sessionId) {\n      throw new Error('Failed to initialize EndlessMedical session');\n    }\n\n    // Step 2: Set patient demographics (assuming adult patient)\n    await callEndlessMedicalAPI('SetSexFemale', { SessionID: sessionId });\n    await callEndlessMedicalAPI('UpdateFeature', { \n      SessionID: sessionId, \n      name: 'Age',\n      value: '30' // Default age for rural healthcare\n    });\n\n    // Step 3: Add symptoms as features\n    for (const symptom of symptoms) {\n      // Clean symptom text and add as feature\n      const cleanSymptom = symptom.trim().toLowerCase();\n      await callEndlessMedicalAPI('UpdateFeature', { \n        SessionID: sessionId, \n        name: cleanSymptom,\n        value: '1' // Present\n      });\n    }\n\n    // Step 4: Get diagnosis\n    const diagnosisResponse = await callEndlessMedicalAPI('Analyze', { SessionID: sessionId });\n    \n    // Step 5: Get top conditions\n    const conditionsResponse = await callEndlessMedicalAPI('GetTopConditions', { \n      SessionID: sessionId,\n      NumberOfResults: '5'\n    });\n\n    // Map EndlessMedical response to our format\n    return mapEndlessMedicalResponse(diagnosisResponse, conditionsResponse, symptoms);\n  } catch (error) {\n    console.error('EndlessMedical API Error:', error);\n    // Fallback to basic analysis if API fails\n    return getFallbackAnalysis(symptoms);\n  }\n}\n\n// Map EndlessMedical response to our expected format\nfunction mapEndlessMedicalResponse(diagnosis: any, conditions: any, symptoms: string[]) {\n  const topConditions = conditions.Conditions || [];\n  const possibleConditions = topConditions.slice(0, 3).map((c: any) => c.Name || 'Unknown condition');\n  \n  // Determine severity based on conditions and symptoms\n  const emergencyKeywords = ['chest pain', 'difficulty breathing', 'severe headache', 'unconscious', 'seizure'];\n  const highKeywords = ['fever', 'severe pain', 'bleeding', 'shortness of breath'];\n  const mediumKeywords = ['headache', 'nausea', 'dizzy', 'fatigue'];\n  \n  const symptomText = symptoms.join(' ').toLowerCase();\n  let severity: 'low' | 'medium' | 'high' | 'emergency' = 'low';\n  let urgency: 'routine' | 'urgent' | 'emergency' = 'routine';\n\n  if (emergencyKeywords.some(keyword => symptomText.includes(keyword))) {\n    severity = 'emergency';\n    urgency = 'emergency';\n  } else if (highKeywords.some(keyword => symptomText.includes(keyword))) {\n    severity = 'high';\n    urgency = 'urgent';\n  } else if (mediumKeywords.some(keyword => symptomText.includes(keyword))) {\n    severity = 'medium';\n    urgency = 'routine';\n  }\n\n  const recommendations = generateRecommendations(severity, possibleConditions);\n\n  return {\n    possibleConditions: possibleConditions.length > 0 ? possibleConditions : ['General health assessment needed'],\n    severity,\n    recommendations,\n    urgency,\n    disclaimer: \"This is a preliminary assessment powered by EndlessMedical AI. Always consult with a qualified healthcare professional for proper diagnosis and treatment. This tool is not a substitute for professional medical advice.\"\n  };\n}\n\n// Generate recommendations based on severity and conditions\nfunction generateRecommendations(severity: string, conditions: string[]) {\n  const baseRecommendations = [\n    \"Monitor your symptoms closely\",\n    \"Stay hydrated and get adequate rest\",\n    \"Consult with a healthcare professional if symptoms persist\"\n  ];\n\n  switch (severity) {\n    case 'emergency':\n      return [\n        \"Seek immediate medical attention\",\n        \"Call emergency services (108 in India)\",\n        \"Do not delay medical care\",\n        \"Have someone accompany you to the hospital\"\n      ];\n    case 'high':\n      return [\n        \"Consult a doctor within 24 hours\",\n        \"Monitor symptoms for any worsening\",\n        \"Consider visiting a clinic or hospital\",\n        \"Keep track of symptom changes\"\n      ];\n    case 'medium':\n      return [\n        \"Schedule an appointment with your doctor\",\n        \"Continue monitoring symptoms\",\n        \"Maintain good self-care practices\",\n        \"Seek care if symptoms worsen\"\n      ];\n    default:\n      return baseRecommendations;\n  }\n}\n\n// Fallback analysis when API is unavailable\nfunction getFallbackAnalysis(symptoms: string[]) {\n  const symptomText = symptoms.join(' ').toLowerCase();\n  \n  // Simple keyword-based analysis as fallback\n  let severity: 'low' | 'medium' | 'high' | 'emergency' = 'medium';\n  let urgency: 'routine' | 'urgent' | 'emergency' = 'routine';\n\n  if (symptomText.includes('chest pain') || symptomText.includes('difficulty breathing') || symptomText.includes('severe')) {\n    severity = 'emergency';\n    urgency = 'emergency';\n  } else if (symptomText.includes('fever') || symptomText.includes('pain')) {\n    severity = 'high';\n    urgency = 'urgent';\n  }\n\n  return {\n    possibleConditions: ['Medical evaluation needed', 'Symptom assessment required'],\n    severity,\n    recommendations: generateRecommendations(severity, []),\n    urgency,\n    disclaimer: \"This is a basic symptom assessment. Please consult with a qualified healthcare professional for proper diagnosis and treatment. This tool is not a substitute for professional medical advice.\"\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for video calls and real-time features\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const rooms = new Map<string, Set<WebSocket>>();\n\n  wss.on('connection', (ws: WebSocket) => {\n    let currentRoom: string | null = null;\n\n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        switch (data.type) {\n          case 'join-room':\n            currentRoom = data.roomId;\n            if (currentRoom && !rooms.has(currentRoom)) {\n              rooms.set(currentRoom, new Set());\n            }\n            if (currentRoom) {\n              rooms.get(currentRoom)!.add(ws);\n              \n              // Notify other participants\n              rooms.get(currentRoom)!.forEach(client => {\n                if (client !== ws && client.readyState === WebSocket.OPEN) {\n                  client.send(JSON.stringify({ type: 'user-joined', userId: data.userId }));\n                }\n              });\n            }\n            break;\n            \n          case 'webrtc-offer':\n          case 'webrtc-answer':\n          case 'webrtc-ice-candidate':\n            // Forward WebRTC signaling to other participants in room\n            if (currentRoom && rooms.has(currentRoom)) {\n              rooms.get(currentRoom)!.forEach(client => {\n                if (client !== ws && client.readyState === WebSocket.OPEN) {\n                  client.send(JSON.stringify(data));\n                }\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (currentRoom && rooms.has(currentRoom)) {\n        rooms.get(currentRoom)!.delete(ws);\n        if (rooms.get(currentRoom)!.size === 0) {\n          rooms.delete(currentRoom);\n        }\n      }\n    });\n  });\n\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/users/firebase/:firebaseUid\", async (req, res) => {\n    try {\n      const user = await storage.getUserByFirebaseUid(req.params.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, updates);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Doctor routes\n  app.post(\"/api/doctors\", async (req, res) => {\n    try {\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.createDoctor(doctorData);\n      res.json(doctor);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/doctors/online\", async (req, res) => {\n    try {\n      const doctors = await storage.getOnlineDoctors();\n      res.json(doctors);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/doctors/specialty/:specialty\", async (req, res) => {\n    try {\n      const doctors = await storage.getDoctorsBySpecialty(req.params.specialty);\n      res.json(doctors);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.put(\"/api/doctors/:id/status\", async (req, res) => {\n    try {\n      const { isOnline } = req.body;\n      const doctor = await storage.updateDoctor(req.params.id, { isOnline });\n      res.json(doctor);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Appointment routes\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/appointments/patient/:patientId\", async (req, res) => {\n    try {\n      const appointments = await storage.getPatientAppointments(req.params.patientId);\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/appointments/doctor/:doctorId\", async (req, res) => {\n    try {\n      const appointments = await storage.getDoctorAppointments(req.params.doctorId);\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const updates = insertAppointmentSchema.partial().parse(req.body);\n      const appointment = await storage.updateAppointment(req.params.id, updates);\n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Health records routes\n  app.post(\"/api/health-records\", async (req, res) => {\n    try {\n      const recordData = insertHealthRecordSchema.parse(req.body);\n      const record = await storage.createHealthRecord(recordData);\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/health-records/patient/:patientId\", async (req, res) => {\n    try {\n      const records = await storage.getPatientHealthRecords(req.params.patientId);\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Medicine routes\n  app.get(\"/api/medicines/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ error: \"Query parameter 'q' is required\" });\n      }\n      const medicines = await storage.searchMedicines(q);\n      res.json(medicines);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/medicines/:id/stock\", async (req, res) => {\n    try {\n      const stock = await storage.getMedicineStock(req.params.id);\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Pharmacy routes\n  app.get(\"/api/pharmacies\", async (req, res) => {\n    try {\n      const pharmacies = await storage.getPharmacies();\n      res.json(pharmacies);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Symptom checker routes\n  app.post(\"/api/symptom-check\", async (req, res) => {\n    try {\n      const { symptoms, patientId } = req.body;\n      \n      if (!symptoms || !Array.isArray(symptoms) || symptoms.length === 0) {\n        return res.status(400).json({ error: \"Symptoms array is required\" });\n      }\n\n      if (!patientId) {\n        return res.status(400).json({ error: \"Patient ID is required\" });\n      }\n\n      // AI analysis using EndlessMedical API (Free)\n      const aiResponse = await analyzeWithEndlessMedical(symptoms);\n      \n      // Save symptom check to database\n      const symptomCheck = await storage.createSymptomCheck({\n        patientId,\n        symptoms,\n        aiResponse,\n        severity: aiResponse.severity\n      });\n\n      res.json(symptomCheck);\n    } catch (error) {\n      console.error('Symptom check error:', error);\n      res.status(500).json({ error: \"Failed to analyze symptoms. Please try again later.\" });\n    }\n  });\n\n  app.get(\"/api/symptom-checks/patient/:patientId\", async (req, res) => {\n    try {\n      const checks = await storage.getPatientSymptomChecks(req.params.patientId);\n      res.json(checks);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":15376},"server/storage.ts":{"content":"import { \n  users, doctors, appointments, healthRecords, medicines, pharmacies, medicineStock, symptomChecks,\n  type User, type InsertUser, type Doctor, type InsertDoctor, type Appointment, type InsertAppointment,\n  type HealthRecord, type InsertHealthRecord, type Medicine, type InsertMedicine,\n  type Pharmacy, type InsertPharmacy, type MedicineStock, type InsertMedicineStock,\n  type SymptomCheck, type InsertSymptomCheck\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n\n  // Doctor operations\n  getDoctor(id: string): Promise<Doctor | undefined>;\n  getDoctorByUserId(userId: string): Promise<Doctor | undefined>;\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  updateDoctor(id: string, updates: Partial<InsertDoctor>): Promise<Doctor>;\n  getOnlineDoctors(): Promise<(Doctor & { user: User })[]>;\n  getDoctorsBySpecialty(specialty: string): Promise<(Doctor & { user: User })[]>;\n\n  // Appointment operations\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getPatientAppointments(patientId: string): Promise<(Appointment & { doctor: Doctor & { user: User } })[]>;\n  getDoctorAppointments(doctorId: string): Promise<(Appointment & { patient: User })[]>;\n  updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment>;\n\n  // Health record operations\n  createHealthRecord(record: InsertHealthRecord): Promise<HealthRecord>;\n  getPatientHealthRecords(patientId: string): Promise<HealthRecord[]>;\n  getHealthRecord(id: string): Promise<HealthRecord | undefined>;\n\n  // Medicine operations\n  searchMedicines(query: string): Promise<Medicine[]>;\n  getMedicine(id: string): Promise<Medicine | undefined>;\n  createMedicine(medicine: InsertMedicine): Promise<Medicine>;\n\n  // Pharmacy operations\n  getPharmacies(): Promise<Pharmacy[]>;\n  getPharmacy(id: string): Promise<Pharmacy | undefined>;\n  createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy>;\n\n  // Medicine stock operations\n  getMedicineStock(medicineId: string): Promise<(MedicineStock & { pharmacy: Pharmacy })[]>;\n  updateMedicineStock(pharmacyId: string, medicineId: string, updates: Partial<InsertMedicineStock>): Promise<MedicineStock>;\n  createMedicineStock(stock: InsertMedicineStock): Promise<MedicineStock>;\n\n  // Symptom check operations\n  createSymptomCheck(check: InsertSymptomCheck): Promise<SymptomCheck>;\n  getPatientSymptomChecks(patientId: string): Promise<SymptomCheck[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getDoctor(id: string): Promise<Doctor | undefined> {\n    const [doctor] = await db.select().from(doctors).where(eq(doctors.id, id));\n    return doctor || undefined;\n  }\n\n  async getDoctorByUserId(userId: string): Promise<Doctor | undefined> {\n    const [doctor] = await db.select().from(doctors).where(eq(doctors.userId, userId));\n    return doctor || undefined;\n  }\n\n  async createDoctor(insertDoctor: InsertDoctor): Promise<Doctor> {\n    const [doctor] = await db.insert(doctors).values(insertDoctor).returning();\n    return doctor;\n  }\n\n  async updateDoctor(id: string, updates: Partial<InsertDoctor>): Promise<Doctor> {\n    const [doctor] = await db.update(doctors).set(updates).where(eq(doctors.id, id)).returning();\n    return doctor;\n  }\n\n  async getOnlineDoctors(): Promise<(Doctor & { user: User })[]> {\n    const result = await db\n      .select()\n      .from(doctors)\n      .innerJoin(users, eq(doctors.userId, users.id))\n      .where(eq(doctors.isOnline, true))\n      .orderBy(desc(doctors.rating));\n    \n    return result.map(({ doctors: doctor, users: user }) => ({ ...doctor, user }));\n  }\n\n  async getDoctorsBySpecialty(specialty: string): Promise<(Doctor & { user: User })[]> {\n    const result = await db\n      .select()\n      .from(doctors)\n      .innerJoin(users, eq(doctors.userId, users.id))\n      .where(eq(doctors.specialty, specialty))\n      .orderBy(desc(doctors.rating));\n    \n    return result.map(({ doctors: doctor, users: user }) => ({ ...doctor, user }));\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const [appointment] = await db.insert(appointments).values(insertAppointment).returning();\n    return appointment;\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async getPatientAppointments(patientId: string): Promise<(Appointment & { doctor: Doctor & { user: User } })[]> {\n    const result = await db\n      .select()\n      .from(appointments)\n      .innerJoin(doctors, eq(appointments.doctorId, doctors.id))\n      .innerJoin(users, eq(doctors.userId, users.id))\n      .where(eq(appointments.patientId, patientId))\n      .orderBy(desc(appointments.scheduledAt));\n    \n    return result.map(({ appointments: appointment, doctors: doctor, users: user }) => ({\n      ...appointment,\n      doctor: { ...doctor, user }\n    }));\n  }\n\n  async getDoctorAppointments(doctorId: string): Promise<(Appointment & { patient: User })[]> {\n    const result = await db\n      .select()\n      .from(appointments)\n      .innerJoin(users, eq(appointments.patientId, users.id))\n      .where(eq(appointments.doctorId, doctorId))\n      .orderBy(desc(appointments.scheduledAt));\n    \n    return result.map(({ appointments: appointment, users: patient }) => ({\n      ...appointment,\n      patient\n    }));\n  }\n\n  async updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment> {\n    const [appointment] = await db.update(appointments).set(updates).where(eq(appointments.id, id)).returning();\n    return appointment;\n  }\n\n  async createHealthRecord(insertRecord: InsertHealthRecord): Promise<HealthRecord> {\n    const [record] = await db.insert(healthRecords).values(insertRecord).returning();\n    return record;\n  }\n\n  async getPatientHealthRecords(patientId: string): Promise<HealthRecord[]> {\n    return await db\n      .select()\n      .from(healthRecords)\n      .where(eq(healthRecords.patientId, patientId))\n      .orderBy(desc(healthRecords.createdAt));\n  }\n\n  async getHealthRecord(id: string): Promise<HealthRecord | undefined> {\n    const [record] = await db.select().from(healthRecords).where(eq(healthRecords.id, id));\n    return record || undefined;\n  }\n\n  async searchMedicines(query: string): Promise<Medicine[]> {\n    return await db\n      .select()\n      .from(medicines)\n      .where(eq(medicines.name, query))\n      .orderBy(asc(medicines.name));\n  }\n\n  async getMedicine(id: string): Promise<Medicine | undefined> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.id, id));\n    return medicine || undefined;\n  }\n\n  async createMedicine(insertMedicine: InsertMedicine): Promise<Medicine> {\n    const [medicine] = await db.insert(medicines).values(insertMedicine).returning();\n    return medicine;\n  }\n\n  async getPharmacies(): Promise<Pharmacy[]> {\n    return await db.select().from(pharmacies).where(eq(pharmacies.isActive, true));\n  }\n\n  async getPharmacy(id: string): Promise<Pharmacy | undefined> {\n    const [pharmacy] = await db.select().from(pharmacies).where(eq(pharmacies.id, id));\n    return pharmacy || undefined;\n  }\n\n  async createPharmacy(insertPharmacy: InsertPharmacy): Promise<Pharmacy> {\n    const [pharmacy] = await db.insert(pharmacies).values(insertPharmacy).returning();\n    return pharmacy;\n  }\n\n  async getMedicineStock(medicineId: string): Promise<(MedicineStock & { pharmacy: Pharmacy })[]> {\n    const result = await db\n      .select()\n      .from(medicineStock)\n      .innerJoin(pharmacies, eq(medicineStock.pharmacyId, pharmacies.id))\n      .where(and(eq(medicineStock.medicineId, medicineId), eq(pharmacies.isActive, true)))\n      .orderBy(desc(medicineStock.quantity));\n    \n    return result.map(({ medicine_stock: stock, pharmacies: pharmacy }) => ({ ...stock, pharmacy }));\n  }\n\n  async updateMedicineStock(pharmacyId: string, medicineId: string, updates: Partial<InsertMedicineStock>): Promise<MedicineStock> {\n    const [stock] = await db\n      .update(medicineStock)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(medicineStock.pharmacyId, pharmacyId), eq(medicineStock.medicineId, medicineId)))\n      .returning();\n    return stock;\n  }\n\n  async createMedicineStock(insertStock: InsertMedicineStock): Promise<MedicineStock> {\n    const [stock] = await db.insert(medicineStock).values(insertStock).returning();\n    return stock;\n  }\n\n  async createSymptomCheck(insertCheck: InsertSymptomCheck): Promise<SymptomCheck> {\n    const [check] = await db.insert(symptomChecks).values(insertCheck).returning();\n    return check;\n  }\n\n  async getPatientSymptomChecks(patientId: string): Promise<SymptomCheck[]> {\n    return await db\n      .select()\n      .from(symptomChecks)\n      .where(eq(symptomChecks.patientId, patientId))\n      .orderBy(desc(symptomChecks.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10088},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\", { enum: [\"patient\", \"doctor\"] }).notNull().default(\"patient\"),\n  profilePicture: text(\"profile_picture\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const doctors = pgTable(\"doctors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  specialty: text(\"specialty\").notNull(),\n  qualification: text(\"qualification\").notNull(),\n  experience: integer(\"experience\").notNull(),\n  rating: integer(\"rating\").default(0),\n  totalRatings: integer(\"total_ratings\").default(0),\n  isOnline: boolean(\"is_online\").default(false),\n  consultationFee: integer(\"consultation_fee\").notNull(),\n  languages: text(\"languages\").array().notNull(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => doctors.id),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  status: text(\"status\", { enum: [\"scheduled\", \"ongoing\", \"completed\", \"cancelled\"] }).notNull().default(\"scheduled\"),\n  type: text(\"type\", { enum: [\"video\", \"audio\", \"chat\"] }).notNull().default(\"video\"),\n  notes: text(\"notes\"),\n  prescription: jsonb(\"prescription\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const healthRecords = pgTable(\"health_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  doctorId: varchar(\"doctor_id\").references(() => doctors.id),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  type: text(\"type\", { enum: [\"vital\", \"report\", \"prescription\", \"diagnosis\"] }).notNull(),\n  title: text(\"title\").notNull(),\n  data: jsonb(\"data\").notNull(),\n  fileUrl: text(\"file_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const medicines = pgTable(\"medicines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  genericName: text(\"generic_name\"),\n  dosage: text(\"dosage\").notNull(),\n  manufacturer: text(\"manufacturer\"),\n  price: integer(\"price\").notNull(),\n  description: text(\"description\"),\n});\n\nexport const pharmacies = pgTable(\"pharmacies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const medicineStock = pgTable(\"medicine_stock\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pharmacyId: varchar(\"pharmacy_id\").notNull().references(() => pharmacies.id),\n  medicineId: varchar(\"medicine_id\").notNull().references(() => medicines.id),\n  quantity: integer(\"quantity\").notNull().default(0),\n  status: text(\"status\", { enum: [\"available\", \"limited\", \"out_of_stock\"] }).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const symptomChecks = pgTable(\"symptom_checks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  symptoms: text(\"symptoms\").array().notNull(),\n  aiResponse: jsonb(\"ai_response\").notNull(),\n  severity: text(\"severity\", { enum: [\"low\", \"medium\", \"high\", \"emergency\"] }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  doctor: one(doctors, { fields: [users.id], references: [doctors.userId] }),\n  appointments: many(appointments),\n  healthRecords: many(healthRecords),\n  symptomChecks: many(symptomChecks),\n}));\n\nexport const doctorsRelations = relations(doctors, ({ one, many }) => ({\n  user: one(users, { fields: [doctors.userId], references: [users.id] }),\n  appointments: many(appointments),\n  healthRecords: many(healthRecords),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  patient: one(users, { fields: [appointments.patientId], references: [users.id] }),\n  doctor: one(doctors, { fields: [appointments.doctorId], references: [doctors.id] }),\n  healthRecords: many(healthRecords),\n}));\n\nexport const healthRecordsRelations = relations(healthRecords, ({ one }) => ({\n  patient: one(users, { fields: [healthRecords.patientId], references: [users.id] }),\n  doctor: one(doctors, { fields: [healthRecords.doctorId], references: [doctors.id] }),\n  appointment: one(appointments, { fields: [healthRecords.appointmentId], references: [appointments.id] }),\n}));\n\nexport const medicineStockRelations = relations(medicineStock, ({ one }) => ({\n  pharmacy: one(pharmacies, { fields: [medicineStock.pharmacyId], references: [pharmacies.id] }),\n  medicine: one(medicines, { fields: [medicineStock.medicineId], references: [medicines.id] }),\n}));\n\nexport const symptomChecksRelations = relations(symptomChecks, ({ one }) => ({\n  patient: one(users, { fields: [symptomChecks.patientId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({ id: true });\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({ id: true, createdAt: true });\nexport const insertHealthRecordSchema = createInsertSchema(healthRecords).omit({ id: true, createdAt: true });\nexport const insertMedicineSchema = createInsertSchema(medicines).omit({ id: true });\nexport const insertPharmacySchema = createInsertSchema(pharmacies).omit({ id: true });\nexport const insertMedicineStockSchema = createInsertSchema(medicineStock).omit({ id: true, updatedAt: true });\nexport const insertSymptomCheckSchema = createInsertSchema(symptomChecks).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type HealthRecord = typeof healthRecords.$inferSelect;\nexport type InsertHealthRecord = z.infer<typeof insertHealthRecordSchema>;\nexport type Medicine = typeof medicines.$inferSelect;\nexport type InsertMedicine = z.infer<typeof insertMedicineSchema>;\nexport type Pharmacy = typeof pharmacies.$inferSelect;\nexport type InsertPharmacy = z.infer<typeof insertPharmacySchema>;\nexport type MedicineStock = typeof medicineStock.$inferSelect;\nexport type InsertMedicineStock = z.infer<typeof insertMedicineStockSchema>;\nexport type SymptomCheck = typeof symptomChecks.$inferSelect;\nexport type InsertSymptomCheck = z.infer<typeof insertSymptomCheckSchema>;\n","size_bytes":7515},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport { Layout } from \"@/components/Layout\";\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Doctors from \"@/pages/Doctors\";\nimport Records from \"@/pages/Records\";\nimport Medicines from \"@/pages/Medicines\";\nimport Profile from \"@/pages/Profile\";\nimport VideoConsultation from \"@/pages/VideoConsultation\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/doctors\" component={Doctors} />\n      <Route path=\"/records\" component={Records} />\n      <Route path=\"/medicines\" component={Medicines} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/video/:roomId\" component={VideoConsultation} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <LanguageProvider>\n            <Layout>\n              <Toaster />\n              <Router />\n            </Layout>\n          </LanguageProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1636},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 8%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(122, 35%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 40%, 45%);\n  --accent: hsl(210, 40%, 95%);\n  --accent-foreground: hsl(210, 40%, 11%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 40%, 87%);\n  --input: hsl(210, 40%, 87%);\n  --ring: hsl(210, 83%, 53%);\n  --chart-1: hsl(210, 83%, 53%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 95%);\n  --sidebar-accent-foreground: hsl(210, 83%, 53%);\n  --sidebar-border: hsl(210, 40%, 87%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n  --font-sans: \"Inter\", \"var(--font-sans)\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(122, 35%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(210, 83%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(210, 83%, 53%);\n  --chart-1: hsl(210, 83%, 53%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(210, 83%, 53%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n  --font-sans: \"Inter\", \"var(--font-sans)\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.status-online { \n  color: #22c55e; \n}\n\n.status-busy { \n  color: #f59e0b; \n}\n\n.status-offline { \n  color: #ef4444; \n}\n\n.medicine-available { \n  background: #dcfce7; \n  color: #15803d; \n}\n\n.medicine-limited { \n  background: #fef3c7; \n  color: #d97706; \n}\n\n.medicine-unavailable { \n  background: #fee2e2; \n  color: #dc2626; \n}\n\n.offline-indicator {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background: #f97316;\n  color: white;\n  text-align: center;\n  padding: 8px;\n  font-size: 14px;\n  z-index: 1000;\n  display: none;\n}\n","size_bytes":5078},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppointmentCard.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { format, isToday, isTomorrow, isPast } from 'date-fns';\n\ninterface Appointment {\n  id: string;\n  scheduledAt: string;\n  status: 'scheduled' | 'ongoing' | 'completed' | 'cancelled';\n  type: 'video' | 'audio' | 'chat';\n  notes?: string;\n  doctor: {\n    id: string;\n    user: {\n      id: string;\n      name: string;\n      profilePicture?: string;\n    };\n    specialty: string;\n  };\n}\n\ninterface AppointmentCardProps {\n  appointment: Appointment;\n  onJoin?: (appointment: Appointment) => void;\n  onReschedule?: (appointment: Appointment) => void;\n  onCancel?: (appointment: Appointment) => void;\n}\n\nexport function AppointmentCard({ appointment, onJoin, onReschedule, onCancel }: AppointmentCardProps) {\n  const appointmentDate = new Date(appointment.scheduledAt);\n  const isPastAppointment = isPast(appointmentDate) && appointment.status !== 'ongoing';\n  \n  const getDateDisplay = () => {\n    if (isToday(appointmentDate)) {\n      return `Today, ${format(appointmentDate, 'h:mm a')}`;\n    } else if (isTomorrow(appointmentDate)) {\n      return `Tomorrow, ${format(appointmentDate, 'h:mm a')}`;\n    } else {\n      return format(appointmentDate, 'MMM dd, h:mm a');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800';\n      case 'ongoing':\n        return 'bg-green-100 text-green-800';\n      case 'completed':\n        return 'bg-gray-100 text-gray-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'video':\n        return 'fas fa-video';\n      case 'audio':\n        return 'fas fa-phone';\n      case 'chat':\n        return 'fas fa-comments';\n      default:\n        return 'fas fa-calendar';\n    }\n  };\n\n  const canJoin = () => {\n    const now = new Date();\n    const diffMinutes = (appointmentDate.getTime() - now.getTime()) / (1000 * 60);\n    return appointment.status === 'scheduled' && diffMinutes <= 15 && diffMinutes >= -15;\n  };\n\n  const canReschedule = () => {\n    return appointment.status === 'scheduled' && !isPastAppointment;\n  };\n\n  return (\n    <div \n      className={`p-4 rounded-lg border ${\n        appointment.status === 'ongoing' ? 'bg-green-50 border-green-200' : \n        isPastAppointment ? 'bg-gray-50' : 'bg-card'\n      }`}\n      data-testid={`card-appointment-${appointment.id}`}\n    >\n      <div className=\"flex items-center space-x-4\">\n        <Avatar className=\"w-12 h-12\">\n          <AvatarImage \n            src={appointment.doctor.user.profilePicture || undefined} \n            alt={appointment.doctor.user.name} \n          />\n          <AvatarFallback>\n            {appointment.doctor.user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1\">\n          <h4 className=\"font-medium\" data-testid=\"text-doctor-name\">\n            Dr. {appointment.doctor.user.name}\n          </h4>\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-doctor-specialty\">\n            {appointment.doctor.specialty}\n          </p>\n          \n          <div className=\"flex items-center mt-1 space-x-2\">\n            <div className=\"flex items-center text-sm\">\n              <i className=\"fas fa-calendar mr-2 text-primary\"></i>\n              <span data-testid=\"text-appointment-date\">{getDateDisplay()}</span>\n            </div>\n            <span className=\"text-muted-foreground\">•</span>\n            <div className=\"flex items-center text-sm\">\n              <i className={`${getTypeIcon(appointment.type)} mr-1 text-secondary`}></i>\n              <span className=\"capitalize\">{appointment.type} Call</span>\n            </div>\n          </div>\n\n          {appointment.notes && (\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              <i className=\"fas fa-sticky-note mr-1\"></i>\n              {appointment.notes}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex flex-col items-end space-y-2\">\n          <Badge className={getStatusColor(appointment.status)}>\n            {appointment.status}\n          </Badge>\n          \n          <div className=\"flex space-x-2\">\n            {canJoin() && onJoin && (\n              <Button\n                size=\"sm\"\n                onClick={() => onJoin(appointment)}\n                data-testid=\"button-join-appointment\"\n              >\n                <i className=\"fas fa-play mr-1\"></i>\n                Join Now\n              </Button>\n            )}\n            \n            {canReschedule() && onReschedule && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onReschedule(appointment)}\n                data-testid=\"button-reschedule\"\n              >\n                <i className=\"fas fa-calendar-alt mr-1\"></i>\n                Reschedule\n              </Button>\n            )}\n            \n            {appointment.status === 'scheduled' && onCancel && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => onCancel(appointment)}\n                data-testid=\"button-cancel-appointment\"\n              >\n                <i className=\"fas fa-times mr-1\"></i>\n                Cancel\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5664},"client/src/components/BottomNavigation.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useLanguage } from '@/contexts/LanguageContext';\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n  const { t } = useLanguage();\n\n  const navItems = [\n    { path: '/', icon: 'fas fa-home', label: t('dashboard'), testId: 'nav-home' },\n    { path: '/doctors', icon: 'fas fa-user-md', label: t('doctors'), testId: 'nav-doctors' },\n    { path: '/records', icon: 'fas fa-file-medical', label: t('health-records'), testId: 'nav-records' },\n    { path: '/medicines', icon: 'fas fa-pills', label: t('medicines'), testId: 'nav-medicines' },\n    { path: '/profile', icon: 'fas fa-user', label: t('profile'), testId: 'nav-profile' },\n  ];\n\n  return (\n    <nav className=\"md:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border\">\n      <div className=\"flex items-center justify-around py-2\">\n        {navItems.map((item) => (\n          <Link\n            key={item.path}\n            href={item.path}\n            className={`flex flex-col items-center py-2 px-3 ${\n              location === item.path ? 'text-primary' : 'text-muted-foreground'\n            } hover:text-primary transition-colors`}\n            data-testid={item.testId}\n          >\n            <i className={`${item.icon} text-lg`}></i>\n            <span className=\"text-xs mt-1\">{item.label}</span>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1406},"client/src/components/DoctorCard.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface Doctor {\n  id: string;\n  user: {\n    id: string;\n    name: string;\n    profilePicture?: string;\n  };\n  specialty: string;\n  qualification: string;\n  experience: number;\n  rating: number;\n  totalRatings: number;\n  isOnline: boolean;\n  consultationFee: number;\n  languages: string[];\n}\n\ninterface DoctorCardProps {\n  doctor: Doctor;\n  onConsult: (doctor: Doctor) => void;\n  onViewProfile: (doctor: Doctor) => void;\n}\n\nexport function DoctorCard({ doctor, onConsult, onViewProfile }: DoctorCardProps) {\n  const getStatusColor = (isOnline: boolean) => {\n    return isOnline ? 'text-green-500' : 'text-gray-400';\n  };\n\n  const getStatusText = (isOnline: boolean) => {\n    return isOnline ? 'Online' : 'Offline';\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating / 20); // Convert rating to 5-star scale\n    const hasHalfStar = (rating % 20) >= 10;\n\n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        stars.push(<i key={i} className=\"fas fa-star text-yellow-400\"></i>);\n      } else if (i === fullStars && hasHalfStar) {\n        stars.push(<i key={i} className=\"fas fa-star-half-alt text-yellow-400\"></i>);\n      } else {\n        stars.push(<i key={i} className=\"far fa-star text-yellow-400\"></i>);\n      }\n    }\n    return stars;\n  };\n\n  return (\n    <div \n      className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n      onClick={() => onViewProfile(doctor)}\n      data-testid={`card-doctor-${doctor.id}`}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <Avatar className=\"w-12 h-12\">\n          <AvatarImage src={doctor.user.profilePicture || undefined} alt={doctor.user.name} />\n          <AvatarFallback>\n            {doctor.user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2\">\n            <h4 className=\"font-medium\" data-testid=\"text-doctor-name\">Dr. {doctor.user.name}</h4>\n            <i className={`fas fa-circle text-xs ${getStatusColor(doctor.isOnline)}`}></i>\n            <span className={`text-xs ${getStatusColor(doctor.isOnline)}`}>\n              {getStatusText(doctor.isOnline)}\n            </span>\n          </div>\n          \n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-doctor-specialty\">\n            {doctor.specialty}\n          </p>\n          \n          <div className=\"flex items-center mt-1 space-x-2\">\n            <div className=\"flex\">\n              {renderStars(doctor.rating)}\n            </div>\n            <span className=\"text-xs text-muted-foreground\">\n              {(doctor.rating / 20).toFixed(1)} ({doctor.totalRatings} reviews)\n            </span>\n          </div>\n          \n          <div className=\"flex items-center mt-1 space-x-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {doctor.experience}+ years\n            </Badge>\n            <span className=\"text-xs text-muted-foreground\">\n              ₹{doctor.consultationFee}/consultation\n            </span>\n          </div>\n          \n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {doctor.languages.slice(0, 3).map((lang, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                {lang}\n              </Badge>\n            ))}\n            {doctor.languages.length > 3 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                +{doctor.languages.length - 3} more\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"text-right\">\n          {doctor.isOnline ? (\n            <Button\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onConsult(doctor);\n              }}\n              data-testid=\"button-consult\"\n            >\n              Consult Now\n            </Button>\n          ) : (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onViewProfile(doctor);\n              }}\n              data-testid=\"button-book-later\"\n            >\n              Book Later\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4570},"client/src/components/Header.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nexport function Header() {\n  const { user, signOut } = useAuth();\n  const { language, setLanguage, t } = useLanguage();\n\n  const handleEmergencyCall = () => {\n    window.open('tel:108', '_self');\n  };\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-xl font-bold text-primary\" data-testid=\"app-title\">\n                <i className=\"fas fa-heartbeat mr-2\"></i>\n                सेहत नाभा\n              </h1>\n              <p className=\"text-xs text-muted-foreground\">Sehat Nabha</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Language Selector */}\n            <Select value={language} onValueChange={setLanguage} data-testid=\"language-selector\">\n              <SelectTrigger className=\"w-24\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hi\">हिंदी</SelectItem>\n                <SelectItem value=\"pa\">ਪੰਜਾਬੀ</SelectItem>\n                <SelectItem value=\"en\">English</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Emergency Button */}\n            <Button \n              variant=\"destructive\" \n              size=\"sm\" \n              onClick={handleEmergencyCall}\n              data-testid=\"button-emergency\"\n            >\n              <i className=\"fas fa-phone-alt mr-2\"></i>\n              {t('emergency')}\n            </Button>\n            \n            {/* User Profile */}\n            {user && (\n              <div className=\"flex items-center space-x-2\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarImage src={user.profilePicture || undefined} alt={user.name} />\n                  <AvatarFallback>\n                    <i className=\"fas fa-user text-sm\"></i>\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-sm font-medium hidden sm:inline\" data-testid=\"text-username\">\n                  {user.name}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={signOut}\n                  className=\"hidden sm:inline-flex\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3080},"client/src/components/HealthRecords.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useOfflineStatus, offlineManager } from '@/lib/offline';\nimport { format } from 'date-fns';\n\ninterface HealthRecord {\n  id: string;\n  type: 'vital' | 'report' | 'prescription' | 'diagnosis';\n  title: string;\n  data: any;\n  fileUrl?: string;\n  createdAt: string;\n}\n\nexport function HealthRecords() {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const isOnline = useOfflineStatus();\n  const [offlineRecords, setOfflineRecords] = useState<HealthRecord[]>([]);\n\n  const { data: onlineRecords, isLoading } = useQuery({\n    queryKey: ['/api/health-records/patient', user?.id],\n    enabled: !!user && isOnline,\n  });\n\n  useEffect(() => {\n    // Load offline records when component mounts\n    loadOfflineRecords();\n  }, []);\n\n  useEffect(() => {\n    // Sync records when coming back online\n    if (isOnline && onlineRecords) {\n      offlineManager.saveHealthRecords(onlineRecords);\n      offlineManager.setLastSync(Date.now());\n    }\n  }, [isOnline, onlineRecords]);\n\n  const loadOfflineRecords = async () => {\n    try {\n      const records = await offlineManager.getHealthRecords();\n      setOfflineRecords(records);\n    } catch (error) {\n      console.error('Error loading offline records:', error);\n    }\n  };\n\n  const records = isOnline ? onlineRecords : offlineRecords;\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'vital':\n        return 'bg-blue-100 text-blue-800';\n      case 'report':\n        return 'bg-green-100 text-green-800';\n      case 'prescription':\n        return 'bg-purple-100 text-purple-800';\n      case 'diagnosis':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'vital':\n        return 'fas fa-heartbeat';\n      case 'report':\n        return 'fas fa-file-medical';\n      case 'prescription':\n        return 'fas fa-prescription-bottle';\n      case 'diagnosis':\n        return 'fas fa-stethoscope';\n      default:\n        return 'fas fa-file';\n    }\n  };\n\n  const renderVitalData = (data: any) => (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n      {data.bloodPressure && (\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold\">{data.bloodPressure}</div>\n          <div className=\"text-xs text-muted-foreground\">Blood Pressure</div>\n        </div>\n      )}\n      {data.weight && (\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold\">{data.weight}kg</div>\n          <div className=\"text-xs text-muted-foreground\">Weight</div>\n        </div>\n      )}\n      {data.glucose && (\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold\">{data.glucose}mg/dL</div>\n          <div className=\"text-xs text-muted-foreground\">Glucose</div>\n        </div>\n      )}\n      {data.heartRate && (\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold\">{data.heartRate}bpm</div>\n          <div className=\"text-xs text-muted-foreground\">Heart Rate</div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderPrescriptionData = (data: any) => (\n    <div className=\"space-y-2\">\n      {data.medicines?.map((medicine: any, index: number) => (\n        <div key={index} className=\"flex justify-between items-center p-2 bg-muted rounded\">\n          <div>\n            <div className=\"font-medium\">{medicine.name}</div>\n            <div className=\"text-sm text-muted-foreground\">{medicine.dosage}</div>\n          </div>\n          <div className=\"text-sm\">\n            {medicine.frequency} - {medicine.duration}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                <div className=\"h-16 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">{t('health-records')}</h2>\n        <div className=\"flex items-center space-x-2\">\n          {!isOnline && (\n            <Badge variant=\"secondary\" data-testid=\"badge-offline\">\n              <i className=\"fas fa-wifi-slash mr-1\"></i>\n              Offline Mode\n            </Badge>\n          )}\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={loadOfflineRecords}\n            data-testid=\"button-refresh-records\"\n          >\n            <i className=\"fas fa-sync-alt mr-2\"></i>\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {!records || records.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <i className=\"fas fa-file-medical text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-medium mb-2\">No Health Records</h3>\n            <p className=\"text-muted-foreground\">\n              Your health records will appear here once you have consultations or add medical data.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {records.map((record: HealthRecord) => (\n            <Card key={record.id} data-testid={`card-record-${record.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className={`${getTypeIcon(record.type)} text-lg`}></i>\n                    <div>\n                      <CardTitle className=\"text-lg\">{record.title}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(record.createdAt), 'MMM dd, yyyy • hh:mm a')}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge className={getTypeColor(record.type)}>\n                    {record.type}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {record.type === 'vital' && renderVitalData(record.data)}\n                {record.type === 'prescription' && renderPrescriptionData(record.data)}\n                {record.type === 'diagnosis' && (\n                  <div className=\"space-y-2\">\n                    <p className=\"font-medium\">Diagnosis:</p>\n                    <p className=\"text-sm\">{record.data.diagnosis}</p>\n                    {record.data.notes && (\n                      <div>\n                        <p className=\"font-medium mt-3\">Notes:</p>\n                        <p className=\"text-sm text-muted-foreground\">{record.data.notes}</p>\n                      </div>\n                    )}\n                  </div>\n                )}\n                {record.type === 'report' && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm\">{record.data.summary}</p>\n                    {record.fileUrl && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => window.open(record.fileUrl, '_blank')}\n                        data-testid={`button-download-${record.id}`}\n                      >\n                        <i className=\"fas fa-download mr-2\"></i>\n                        Download Report\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8291},"client/src/components/Layout.tsx":{"content":"import { Header } from './Header';\nimport { BottomNavigation } from './BottomNavigation';\nimport { useOfflineStatus } from '@/lib/offline';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const isOnline = useOfflineStatus();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      {/* Offline Indicator */}\n      {!isOnline && (\n        <div className=\"fixed top-0 left-0 right-0 bg-orange-500 text-white text-center py-2 text-sm z-50\">\n          <i className=\"fas fa-wifi-slash mr-2\"></i>\n          ऑफलाइन मोड - Offline Mode - ਆਫਲਾਈਨ ਮੋਡ\n        </div>\n      )}\n\n      <Header />\n      \n      <main className={`${!isOnline ? 'pt-10' : ''}`}>\n        {children}\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":858},"client/src/components/MedicineTracker.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useLanguage } from '@/contexts/LanguageContext';\n\ninterface Medicine {\n  id: string;\n  name: string;\n  genericName?: string;\n  dosage: string;\n  manufacturer?: string;\n  price: number;\n}\n\ninterface MedicineStock {\n  id: string;\n  quantity: number;\n  status: 'available' | 'limited' | 'out_of_stock';\n  pharmacy: {\n    id: string;\n    name: string;\n    address: string;\n    phone?: string;\n  };\n}\n\nexport function MedicineTracker() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedMedicine, setSelectedMedicine] = useState<Medicine | null>(null);\n\n  const { data: medicines, isLoading: searchLoading } = useQuery({\n    queryKey: ['/api/medicines/search', { q: searchQuery }],\n    enabled: searchQuery.length > 2,\n  });\n\n  const { data: medicineStock, isLoading: stockLoading } = useQuery({\n    queryKey: ['/api/medicines', selectedMedicine?.id, 'stock'],\n    enabled: !!selectedMedicine,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available':\n        return 'bg-green-100 text-green-800';\n      case 'limited':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'out_of_stock':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'available':\n        return 'fas fa-check-circle';\n      case 'limited':\n        return 'fas fa-exclamation-triangle';\n      case 'out_of_stock':\n        return 'fas fa-times-circle';\n      default:\n        return 'fas fa-question-circle';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'available':\n        return t('available');\n      case 'limited':\n        return t('limited-stock');\n      case 'out_of_stock':\n        return t('out-of-stock');\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-pills mr-2 text-primary\"></i>\n            {t('medicine-availability')} - Live Updates\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"Search medicine (e.g., Paracetamol, Amoxicillin)\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-medicine-search\"\n            />\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setSearchQuery('');\n                setSelectedMedicine(null);\n              }}\n              data-testid=\"button-clear-search\"\n            >\n              Clear\n            </Button>\n          </div>\n\n          {searchLoading && (\n            <div className=\"text-center py-4\">\n              <i className=\"fas fa-spinner fa-spin text-primary mr-2\"></i>\n              Searching medicines...\n            </div>\n          )}\n\n          {medicines && medicines.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Search Results:</h4>\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {medicines.map((medicine: Medicine) => (\n                  <div\n                    key={medicine.id}\n                    className={`p-3 border rounded-lg cursor-pointer hover:bg-muted transition-colors ${\n                      selectedMedicine?.id === medicine.id ? 'bg-accent border-primary' : ''\n                    }`}\n                    onClick={() => setSelectedMedicine(medicine)}\n                    data-testid={`medicine-item-${medicine.id}`}\n                  >\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <h5 className=\"font-medium\">{medicine.name}</h5>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {medicine.dosage}\n                          {medicine.genericName && ` • ${medicine.genericName}`}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">₹{medicine.price}</p>\n                        {medicine.manufacturer && (\n                          <p className=\"text-xs text-muted-foreground\">{medicine.manufacturer}</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {searchQuery.length > 2 && medicines && medicines.length === 0 && !searchLoading && (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              <i className=\"fas fa-search text-2xl mb-2\"></i>\n              <p>No medicines found for \"{searchQuery}\"</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {selectedMedicine && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div>\n                <span>{selectedMedicine.name}</span>\n                <p className=\"text-sm font-normal text-muted-foreground\">\n                  Availability in nearby pharmacies\n                </p>\n              </div>\n              <Badge variant=\"outline\">\n                <i className=\"fas fa-sync-alt mr-1\"></i>\n                Live Data\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {stockLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-16 bg-muted rounded-lg\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : medicineStock && medicineStock.length > 0 ? (\n              <div className=\"space-y-3\">\n                {medicineStock.map((stock: MedicineStock) => (\n                  <div\n                    key={stock.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    data-testid={`stock-item-${stock.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <h5 className=\"font-medium\">{stock.pharmacy.name}</h5>\n                      <p className=\"text-sm text-muted-foreground\">{stock.pharmacy.address}</p>\n                      {stock.pharmacy.phone && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          <i className=\"fas fa-phone mr-1\"></i>\n                          {stock.pharmacy.phone}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-right space-y-1\">\n                      <Badge className={getStatusColor(stock.status)}>\n                        <i className={`${getStatusIcon(stock.status)} mr-1`}></i>\n                        {getStatusText(stock.status)}\n                      </Badge>\n                      \n                      {stock.status !== 'out_of_stock' && (\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">₹{selectedMedicine.price}</span>\n                          {stock.quantity > 0 && (\n                            <span className=\"text-muted-foreground ml-2\">\n                              ({stock.quantity} in stock)\n                            </span>\n                          )}\n                        </div>\n                      )}\n                      \n                      {stock.pharmacy.phone && stock.status !== 'out_of_stock' && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => window.open(`tel:${stock.pharmacy.phone}`, '_self')}\n                          data-testid={`button-call-${stock.id}`}\n                        >\n                          <i className=\"fas fa-phone mr-1\"></i>\n                          Call\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <i className=\"fas fa-store-slash text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium mb-2\">No Stock Information</h3>\n                <p className=\"text-muted-foreground\">\n                  Stock information for this medicine is not available in nearby pharmacies.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9192},"client/src/components/SymptomChecker.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { auth } from '@/lib/firebase';\nimport { analyzeSymptoms, getSeverityColor, getSeverityBgColor, type SymptomCheck } from '@/lib/openai';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function SymptomChecker() {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [currentSymptom, setCurrentSymptom] = useState('');\n  const [symptoms, setSymptoms] = useState<string[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [result, setResult] = useState<SymptomCheck | null>(null);\n\n  // Use demo user if Firebase is not configured and no user is authenticated\n  const currentUser = user || (!auth ? {\n    id: 'demo-user',\n    name: 'Demo User',\n    email: 'demo@example.com',\n    role: 'patient' as const\n  } : null);\n\n  const addSymptom = () => {\n    if (currentSymptom.trim() && !symptoms.includes(currentSymptom.trim())) {\n      setSymptoms([...symptoms, currentSymptom.trim()]);\n      setCurrentSymptom('');\n    }\n  };\n\n  const removeSymptom = (symptom: string) => {\n    setSymptoms(symptoms.filter(s => s !== symptom));\n  };\n\n  const analyzeSymptom = async () => {\n    if (symptoms.length === 0 || !currentUser) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one symptom to analyze.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      const analysis = await analyzeSymptoms(symptoms, currentUser.id);\n      setResult(analysis);\n      \n      toast({\n        title: \"Analysis Complete\",\n        description: \"Your symptoms have been analyzed successfully.\",\n      });\n    } catch (error) {\n      console.error('Symptom analysis error:', error);\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Unable to analyze symptoms. Please try again later.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const clearSymptoms = () => {\n    setSymptoms([]);\n    setResult(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-stethoscope mr-2 text-secondary\"></i>\n            {t('symptom-checker')} - AI Powered\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"Enter a symptom (e.g., fever, headache, cough)\"\n              value={currentSymptom}\n              onChange={(e) => setCurrentSymptom(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addSymptom()}\n              data-testid=\"input-symptom\"\n            />\n            <Button onClick={addSymptom} data-testid=\"button-add-symptom\">\n              Add\n            </Button>\n          </div>\n\n          {symptoms.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Current Symptoms:</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {symptoms.map((symptom, index) => (\n                  <Badge \n                    key={index} \n                    variant=\"secondary\" \n                    className=\"cursor-pointer\"\n                    onClick={() => removeSymptom(symptom)}\n                    data-testid={`badge-symptom-${index}`}\n                  >\n                    {symptom} <i className=\"fas fa-times ml-1\"></i>\n                  </Badge>\n                ))}\n              </div>\n              \n              <div className=\"flex space-x-2 pt-2\">\n                <Button \n                  onClick={analyzeSymptom} \n                  disabled={isAnalyzing}\n                  data-testid=\"button-analyze-symptoms\"\n                >\n                  {isAnalyzing ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-robot mr-2\"></i>\n                      Analyze Symptoms\n                    </>\n                  )}\n                </Button>\n                <Button variant=\"outline\" onClick={clearSymptoms} data-testid=\"button-clear-symptoms\">\n                  Clear All\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              AI Analysis Results\n              <Badge \n                className={`${getSeverityColor(result.severity)} ${getSeverityBgColor(result.severity)}`}\n                data-testid=\"badge-severity\"\n              >\n                {result.severity.toUpperCase()}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Possible Conditions:</h4>\n              <ul className=\"list-disc list-inside space-y-1\" data-testid=\"list-conditions\">\n                {result.aiResponse.possibleConditions.map((condition, index) => (\n                  <li key={index} className=\"text-sm\">{condition}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-2\">Recommendations:</h4>\n              <ul className=\"list-disc list-inside space-y-1\" data-testid=\"list-recommendations\">\n                {result.aiResponse.recommendations.map((recommendation, index) => (\n                  <li key={index} className=\"text-sm\">{recommendation}</li>\n                ))}\n              </ul>\n            </div>\n\n            {result.aiResponse.urgency === 'emergency' && (\n              <div className=\"bg-red-100 border border-red-300 rounded-lg p-4\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-exclamation-triangle text-red-600 mr-2\"></i>\n                  <span className=\"font-medium text-red-800\">Emergency Alert</span>\n                </div>\n                <p className=\"text-red-700 text-sm mt-1\">\n                  Your symptoms may require immediate medical attention. Please contact emergency services or visit the nearest hospital.\n                </p>\n                <Button \n                  variant=\"destructive\" \n                  className=\"mt-2\" \n                  onClick={() => window.open('tel:108', '_self')}\n                  data-testid=\"button-emergency-call\"\n                >\n                  <i className=\"fas fa-phone mr-2\"></i>\n                  Call 108 - Emergency\n                </Button>\n              </div>\n            )}\n\n            <div className=\"bg-muted p-3 rounded-lg\">\n              <p className=\"text-xs text-muted-foreground\">\n                <i className=\"fas fa-info-circle mr-1\"></i>\n                {result.aiResponse.disclaimer}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":7486},"client/src/components/VideoCall.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useWebSocket } from '@/lib/websocket';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface VideoCallProps {\n  roomId: string;\n  onEnd: () => void;\n}\n\nexport function VideoCall({ roomId, onEnd }: VideoCallProps) {\n  const { user } = useAuth();\n  const { send, subscribe } = useWebSocket();\n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\n  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\n  const localStreamRef = useRef<MediaStream | null>(null);\n  \n  const [isCallActive, setIsCallActive] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n\n  useEffect(() => {\n    initializeCall();\n    \n    const unsubscribeOffer = subscribe('webrtc-offer', handleOffer);\n    const unsubscribeAnswer = subscribe('webrtc-answer', handleAnswer);\n    const unsubscribeIceCandidate = subscribe('webrtc-ice-candidate', handleIceCandidate);\n    const unsubscribeUserJoined = subscribe('user-joined', handleUserJoined);\n\n    return () => {\n      cleanup();\n      unsubscribeOffer();\n      unsubscribeAnswer();\n      unsubscribeIceCandidate();\n      unsubscribeUserJoined();\n    };\n  }, []);\n\n  const initializeCall = async () => {\n    try {\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true,\n      });\n      \n      localStreamRef.current = stream;\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      // Create peer connection\n      peerConnectionRef.current = new RTCPeerConnection({\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n      });\n\n      // Add local stream to peer connection\n      stream.getTracks().forEach(track => {\n        peerConnectionRef.current!.addTrack(track, stream);\n      });\n\n      // Handle remote stream\n      peerConnectionRef.current.ontrack = (event) => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      peerConnectionRef.current.onicecandidate = (event) => {\n        if (event.candidate) {\n          send('webrtc-ice-candidate', {\n            candidate: event.candidate,\n            roomId,\n          });\n        }\n      };\n\n      // Join the room\n      send('join-room', { roomId, userId: user?.id });\n      setIsCallActive(true);\n    } catch (error) {\n      console.error('Error initializing call:', error);\n    }\n  };\n\n  const handleUserJoined = async () => {\n    // Create and send offer when another user joins\n    try {\n      const offer = await peerConnectionRef.current!.createOffer();\n      await peerConnectionRef.current!.setLocalDescription(offer);\n      \n      send('webrtc-offer', {\n        offer,\n        roomId,\n      });\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  };\n\n  const handleOffer = async (data: any) => {\n    try {\n      await peerConnectionRef.current!.setRemoteDescription(data.offer);\n      const answer = await peerConnectionRef.current!.createAnswer();\n      await peerConnectionRef.current!.setLocalDescription(answer);\n      \n      send('webrtc-answer', {\n        answer,\n        roomId,\n      });\n    } catch (error) {\n      console.error('Error handling offer:', error);\n    }\n  };\n\n  const handleAnswer = async (data: any) => {\n    try {\n      await peerConnectionRef.current!.setRemoteDescription(data.answer);\n    } catch (error) {\n      console.error('Error handling answer:', error);\n    }\n  };\n\n  const handleIceCandidate = async (data: any) => {\n    try {\n      await peerConnectionRef.current!.addIceCandidate(data.candidate);\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n\n  const toggleMute = () => {\n    if (localStreamRef.current) {\n      const audioTracks = localStreamRef.current.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = isMuted;\n      });\n      setIsMuted(!isMuted);\n    }\n  };\n\n  const toggleVideo = () => {\n    if (localStreamRef.current) {\n      const videoTracks = localStreamRef.current.getVideoTracks();\n      videoTracks.forEach(track => {\n        track.enabled = isVideoOff;\n      });\n      setIsVideoOff(!isVideoOff);\n    }\n  };\n\n  const endCall = () => {\n    cleanup();\n    onEnd();\n  };\n\n  const cleanup = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n    }\n    setIsCallActive(false);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Video Container */}\n      <div className=\"flex-1 relative\">\n        {/* Remote Video */}\n        <video\n          ref={remoteVideoRef}\n          autoPlay\n          playsInline\n          className=\"w-full h-full object-cover\"\n          data-testid=\"video-remote\"\n        />\n        \n        {/* Local Video */}\n        <video\n          ref={localVideoRef}\n          autoPlay\n          playsInline\n          muted\n          className=\"absolute top-4 right-4 w-32 h-24 object-cover rounded-lg border-2 border-white\"\n          data-testid=\"video-local\"\n        />\n      </div>\n\n      {/* Call Controls */}\n      <div className=\"bg-black/80 p-4 flex justify-center items-center space-x-4\">\n        <Button\n          variant={isMuted ? \"destructive\" : \"secondary\"}\n          size=\"lg\"\n          onClick={toggleMute}\n          className=\"rounded-full w-12 h-12\"\n          data-testid=\"button-mute\"\n        >\n          <i className={`fas ${isMuted ? 'fa-microphone-slash' : 'fa-microphone'}`}></i>\n        </Button>\n\n        <Button\n          variant={isVideoOff ? \"destructive\" : \"secondary\"}\n          size=\"lg\"\n          onClick={toggleVideo}\n          className=\"rounded-full w-12 h-12\"\n          data-testid=\"button-video\"\n        >\n          <i className={`fas ${isVideoOff ? 'fa-video-slash' : 'fa-video'}`}></i>\n        </Button>\n\n        <Button\n          variant=\"destructive\"\n          size=\"lg\"\n          onClick={endCall}\n          className=\"rounded-full w-12 h-12\"\n          data-testid=\"button-end-call\"\n        >\n          <i className=\"fas fa-phone-slash\"></i>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6476},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { User as FirebaseUser, onAuthStateChanged } from 'firebase/auth';\nimport { auth, handleRedirect } from '@/lib/firebase';\nimport { User } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AuthContextType {\n  firebaseUser: FirebaseUser | null;\n  user: User | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Handle redirect result on page load\n    handleRedirect().catch(console.error);\n\n    // If Firebase is not configured, just set loading to false and return\n    if (!auth) {\n      console.warn('Firebase not configured. Authentication features disabled.');\n      setLoading(false);\n      return;\n    }\n\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setFirebaseUser(firebaseUser);\n      \n      if (firebaseUser) {\n        try {\n          // Try to get existing user\n          const response = await fetch(`/api/users/firebase/${firebaseUser.uid}`);\n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n          } else if (response.status === 404) {\n            // Create new user\n            const newUserData = {\n              firebaseUid: firebaseUser.uid,\n              email: firebaseUser.email!,\n              name: firebaseUser.displayName || firebaseUser.email!.split('@')[0],\n              phone: firebaseUser.phoneNumber,\n              role: 'patient' as const,\n              profilePicture: firebaseUser.photoURL,\n            };\n            \n            const createResponse = await apiRequest('POST', '/api/users', newUserData);\n            const userData = await createResponse.json();\n            setUser(userData);\n          }\n        } catch (error) {\n          console.error('Error managing user data:', error);\n        }\n      } else {\n        setUser(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const signOut = async () => {\n    const { logout } = await import('@/lib/firebase');\n    await logout();\n  };\n\n  return (\n    <AuthContext.Provider value={{ firebaseUser, user, loading, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2798},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\n\ninterface LanguageContextType {\n  language: 'hi' | 'pa' | 'en';\n  setLanguage: (lang: 'hi' | 'pa' | 'en') => void;\n  t: (key: string) => string;\n}\n\nconst translations = {\n  hi: {\n    welcome: 'नमस्ते',\n    dashboard: 'डैशबोर्ड',\n    doctors: 'डॉक्टर',\n    appointments: 'अपॉइंटमेंट',\n    'health-records': 'स्वास्थ्य रिकॉर्ड',\n    medicines: 'दवाएं',\n    profile: 'प्रोफाइल',\n    'video-consultation': 'वीडियो परामर्श',\n    'symptom-checker': 'लक्षण जांच',\n    'medicine-availability': 'दवा उपलब्धता',\n    emergency: 'आपातकाल',\n    'book-appointment': 'अपॉइंटमेंट बुक करें',\n    'view-all': 'सभी देखें',\n    online: 'ऑनलाइन',\n    offline: 'ऑफलाइन',\n    busy: 'व्यस्त',\n    available: 'उपलब्ध',\n    'limited-stock': 'सीमित स्टॉक',\n    'out-of-stock': 'स्टॉक में नहीं',\n    'next-appointment': 'अगली अपॉइंटमेंट',\n    'doctors-online': 'ऑनलाइन डॉक्टर',\n    'medicines-tracked': 'दवाएं उपलब्ध',\n    'records-synced': 'रिकॉर्ड सुरक्षित',\n    'quick-services': 'त्वरित सेवाएं',\n    'upcoming-appointments': 'आगामी अपॉइंटमेंट',\n    'health-summary': 'स्वास्थ्य रिकॉर्ड',\n    'available-doctors': 'उपलब्ध डॉक्टर',\n    'medicine-status': 'दवा स्थिति',\n    'emergency-services': 'आपातकालीन सेवाएं',\n  },\n  pa: {\n    welcome: 'ਸਤ ਸ੍ਰੀ ਅਕਾਲ',\n    dashboard: 'ਡੈਸ਼ਬੋਰਡ',\n    doctors: 'ਡਾਕਟਰ',\n    appointments: 'ਮੁਲਾਕਾਤ',\n    'health-records': 'ਸਿਹਤ ਰਿਕਾਰਡ',\n    medicines: 'ਦਵਾਈਆਂ',\n    profile: 'ਪ੍ਰੋਫਾਈਲ',\n    'video-consultation': 'ਵੀਡੀਓ ਸਲਾਹ',\n    'symptom-checker': 'ਲੱਛਣ ਜਾਂਚ',\n    'medicine-availability': 'ਦਵਾਈ ਉਪਲਬਧਤਾ',\n    emergency: 'ਐਮਰਜੈਂਸੀ',\n    'book-appointment': 'ਮੁਲਾਕਾਤ ਬੁੱਕ ਕਰੋ',\n    'view-all': 'ਸਭ ਦੇਖੋ',\n    online: 'ਔਨਲਾਈਨ',\n    offline: 'ਔਫਲਾਈਨ',\n    busy: 'ਰੁੱਝਿਆ',\n    available: 'ਉਪਲਬਧ',\n    'limited-stock': 'ਸੀਮਿਤ ਸਟਾਕ',\n    'out-of-stock': 'ਸਟਾਕ ਵਿੱਚ ਨਹੀਂ',\n    'next-appointment': 'ਅਗਲੀ ਮੁਲਾਕਾਤ',\n    'doctors-online': 'ਔਨਲਾਈਨ ਡਾਕਟਰ',\n    'medicines-tracked': 'ਦਵਾਈਆਂ ਉਪਲਬਧ',\n    'records-synced': 'ਰਿਕਾਰਡ ਸੁਰੱਖਿਅਤ',\n    'quick-services': 'ਤੇਜ਼ ਸੇਵਾਵਾਂ',\n    'upcoming-appointments': 'ਆਉਣ ਵਾਲੀਆਂ ਮੁਲਾਕਾਤਾਂ',\n    'health-summary': 'ਸਿਹਤ ਰਿਕਾਰਡ',\n    'available-doctors': 'ਉਪਲਬਧ ਡਾਕਟਰ',\n    'medicine-status': 'ਦਵਾਈ ਸਥਿਤੀ',\n    'emergency-services': 'ਐਮਰਜੈਂਸੀ ਸੇਵਾਵਾਂ',\n  },\n  en: {\n    welcome: 'Welcome',\n    dashboard: 'Dashboard',\n    doctors: 'Doctors',\n    appointments: 'Appointments',\n    'health-records': 'Health Records',\n    medicines: 'Medicines',\n    profile: 'Profile',\n    'video-consultation': 'Video Consultation',\n    'symptom-checker': 'Symptom Checker',\n    'medicine-availability': 'Medicine Availability',\n    emergency: 'Emergency',\n    'book-appointment': 'Book Appointment',\n    'view-all': 'View All',\n    online: 'Online',\n    offline: 'Offline',\n    busy: 'Busy',\n    available: 'Available',\n    'limited-stock': 'Limited Stock',\n    'out-of-stock': 'Out of Stock',\n    'next-appointment': 'Next Appointment',\n    'doctors-online': 'Doctors Online',\n    'medicines-tracked': 'Medicines Available',\n    'records-synced': 'Records Synced',\n    'quick-services': 'Quick Services',\n    'upcoming-appointments': 'Upcoming Appointments',\n    'health-summary': 'Health Summary',\n    'available-doctors': 'Available Doctors',\n    'medicine-status': 'Medicine Status',\n    'emergency-services': 'Emergency Services',\n  },\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<'hi' | 'pa' | 'en'>('hi');\n\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('language') as 'hi' | 'pa' | 'en';\n    if (savedLanguage && translations[savedLanguage]) {\n      setLanguage(savedLanguage);\n    }\n  }, []);\n\n  const handleSetLanguage = (lang: 'hi' | 'pa' | 'en') => {\n    setLanguage(lang);\n    localStorage.setItem('language', lang);\n  };\n\n  const t = (key: string): string => {\n    return translations[language][key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":5520},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, signOut } from \"firebase/auth\";\n\n// Check if Firebase config is available\nconst hasFirebaseConfig = !!(\n  import.meta.env.VITE_FIREBASE_API_KEY &&\n  import.meta.env.VITE_FIREBASE_PROJECT_ID &&\n  import.meta.env.VITE_FIREBASE_APP_ID\n);\n\n// Only initialize Firebase if config is available\nlet app: any = null;\nlet auth: any = null;\n\nif (hasFirebaseConfig) {\n  const firebaseConfig = {\n    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n    authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n    storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n    appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  };\n\n  try {\n    app = initializeApp(firebaseConfig);\n    auth = getAuth(app);\n  } catch (error) {\n    console.warn('Firebase initialization failed:', error);\n    auth = null;\n  }\n}\n\nexport { auth };\n\nconst provider = hasFirebaseConfig ? new GoogleAuthProvider() : null;\n\nexport function login() {\n  if (!auth || !provider) {\n    console.warn('Firebase not configured. Login unavailable.');\n    return;\n  }\n  signInWithRedirect(auth, provider);\n}\n\nexport function logout() {\n  if (!auth) {\n    console.warn('Firebase not configured. Logout unavailable.');\n    return Promise.resolve();\n  }\n  return signOut(auth);\n}\n\nexport function handleRedirect() {\n  if (!auth) {\n    console.warn('Firebase not configured. Redirect handling unavailable.');\n    return Promise.resolve(null);\n  }\n  \n  return getRedirectResult(auth)\n    .then((result) => {\n      if (result) {\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential?.accessToken;\n        const user = result.user;\n        return { user, token };\n      }\n      return null;\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      const email = error.customData?.email;\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      throw { errorCode, errorMessage, email, credential };\n    });\n}\n","size_bytes":2203},"client/src/lib/offline.ts":{"content":"import { useState, useEffect } from 'react';\n\n// IndexedDB for offline storage\ninterface OfflineData {\n  healthRecords: any[];\n  appointments: any[];\n  medicines: any[];\n  lastSync: number;\n}\n\nclass OfflineManager {\n  private dbName = 'SehatNabhaDB';\n  private dbVersion = 1;\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores\n        if (!db.objectStoreNames.contains('healthRecords')) {\n          db.createObjectStore('healthRecords', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('appointments')) {\n          db.createObjectStore('appointments', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('medicines')) {\n          db.createObjectStore('medicines', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('settings')) {\n          db.createObjectStore('settings', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  async saveHealthRecords(records: any[]): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['healthRecords'], 'readwrite');\n    const store = transaction.objectStore('healthRecords');\n    \n    for (const record of records) {\n      await store.put(record);\n    }\n  }\n\n  async getHealthRecords(): Promise<any[]> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['healthRecords'], 'readonly');\n      const store = transaction.objectStore('healthRecords');\n      const request = store.getAll();\n      \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async saveAppointments(appointments: any[]): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['appointments'], 'readwrite');\n    const store = transaction.objectStore('appointments');\n    \n    for (const appointment of appointments) {\n      await store.put(appointment);\n    }\n  }\n\n  async getAppointments(): Promise<any[]> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['appointments'], 'readonly');\n      const store = transaction.objectStore('appointments');\n      const request = store.getAll();\n      \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async setLastSync(timestamp: number): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const transaction = this.db!.transaction(['settings'], 'readwrite');\n    const store = transaction.objectStore('settings');\n    await store.put({ key: 'lastSync', value: timestamp });\n  }\n\n  async getLastSync(): Promise<number> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['settings'], 'readonly');\n      const store = transaction.objectStore('settings');\n      const request = store.get('lastSync');\n      \n      request.onsuccess = () => {\n        resolve(request.result?.value || 0);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clearAll(): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const stores = ['healthRecords', 'appointments', 'medicines', 'settings'];\n    const transaction = this.db!.transaction(stores, 'readwrite');\n    \n    for (const storeName of stores) {\n      const store = transaction.objectStore(storeName);\n      await store.clear();\n    }\n  }\n}\n\nexport const offlineManager = new OfflineManager();\n\nexport function useOfflineStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return isOnline;\n}\n","size_bytes":4540},"client/src/lib/openai.ts":{"content":"// Client-side EndlessMedical functionality will be handled through backend API calls\n// This file provides types and utilities for symptom checking using FREE EndlessMedical API\n\nexport interface SymptomCheckResponse {\n  possibleConditions: string[];\n  severity: 'low' | 'medium' | 'high' | 'emergency';\n  recommendations: string[];\n  urgency: 'routine' | 'urgent' | 'emergency';\n  disclaimer: string;\n}\n\nexport interface SymptomCheck {\n  id: string;\n  patientId: string;\n  symptoms: string[];\n  aiResponse: SymptomCheckResponse;\n  severity: 'low' | 'medium' | 'high' | 'emergency';\n  createdAt: string;\n}\n\nexport async function analyzeSymptoms(symptoms: string[], patientId: string): Promise<SymptomCheck> {\n  const response = await fetch('/api/symptom-check', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ symptoms, patientId }),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to analyze symptoms');\n  }\n\n  return response.json();\n}\n\nexport function getSeverityColor(severity: string): string {\n  switch (severity) {\n    case 'low':\n      return 'text-green-600';\n    case 'medium':\n      return 'text-yellow-600';\n    case 'high':\n      return 'text-orange-600';\n    case 'emergency':\n      return 'text-red-600';\n    default:\n      return 'text-gray-600';\n  }\n}\n\nexport function getSeverityBgColor(severity: string): string {\n  switch (severity) {\n    case 'low':\n      return 'bg-green-100';\n    case 'medium':\n      return 'bg-yellow-100';\n    case 'high':\n      return 'bg-orange-100';\n    case 'emergency':\n      return 'bg-red-100';\n    default:\n      return 'bg-gray-100';\n  }\n}\n","size_bytes":1667},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\nexport class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private listeners: Map<string, Set<(data: any) => void>> = new Map();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 1000;\n\n  connect() {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    this.ws = new WebSocket(wsUrl);\n\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        const listeners = this.listeners.get(data.type);\n        if (listeners) {\n          listeners.forEach(callback => callback(data));\n        }\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.attemptReconnect();\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, this.reconnectInterval * this.reconnectAttempts);\n    }\n  }\n\n  send(type: string, data: any) {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type, ...data }));\n    }\n  }\n\n  subscribe(eventType: string, callback: (data: any) => void) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType)!.add(callback);\n\n    return () => {\n      const listeners = this.listeners.get(eventType);\n      if (listeners) {\n        listeners.delete(callback);\n        if (listeners.size === 0) {\n          this.listeners.delete(eventType);\n        }\n      }\n    };\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport const wsManager = new WebSocketManager();\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    wsManager.connect();\n\n    const checkConnection = () => {\n      setIsConnected(wsManager['ws']?.readyState === WebSocket.OPEN);\n    };\n\n    const interval = setInterval(checkConnection, 1000);\n    checkConnection();\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return {\n    isConnected,\n    send: wsManager.send.bind(wsManager),\n    subscribe: wsManager.subscribe.bind(wsManager),\n  };\n}\n","size_bytes":2866},"client/src/pages/Doctors.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { DoctorCard } from '@/components/DoctorCard';\nimport { VideoCall } from '@/components/VideoCall';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Doctors() {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n  const [selectedDoctor, setSelectedDoctor] = useState<any>(null);\n  const [activeVideoCall, setActiveVideoCall] = useState<string | null>(null);\n\n  const { data: onlineDoctors } = useQuery({\n    queryKey: ['/api/doctors/online'],\n  });\n\n  const { data: specialtyDoctors } = useQuery({\n    queryKey: ['/api/doctors/specialty', selectedSpecialty],\n    enabled: !!selectedSpecialty,\n  });\n\n  const doctors = selectedSpecialty ? specialtyDoctors : onlineDoctors;\n\n  const filteredDoctors = doctors?.filter((doctor: any) =>\n    doctor.user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    doctor.specialty.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const specialties = [\n    'General Medicine',\n    'Cardiology',\n    'Pediatrics',\n    'Dermatology',\n    'Orthopedics',\n    'Gynecology',\n    'Neurology',\n    'Psychiatry',\n    'ENT',\n    'Ophthalmology'\n  ];\n\n  const handleConsultDoctor = (doctor: any) => {\n    if (!doctor.isOnline) {\n      toast({\n        title: \"Doctor Not Available\",\n        description: \"This doctor is currently offline. Please try booking an appointment.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const roomId = `consultation-${user?.id}-${doctor.id}-${Date.now()}`;\n    setActiveVideoCall(roomId);\n  };\n\n  const handleViewProfile = (doctor: any) => {\n    setSelectedDoctor(doctor);\n  };\n\n  const handleBookAppointment = (doctor: any) => {\n    // TODO: Implement appointment booking\n    toast({\n      title: \"Appointment Booking\",\n      description: \"Appointment booking feature will be available soon.\",\n    });\n  };\n\n  if (activeVideoCall) {\n    return (\n      <VideoCall\n        roomId={activeVideoCall}\n        onEnd={() => setActiveVideoCall(null)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">{t('doctors')} - Find Doctors</h1>\n        <p className=\"text-muted-foreground\">Connect with qualified doctors for video consultations</p>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-search mr-2\"></i>\n            Search Doctors\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              placeholder=\"Search by doctor name or specialty\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search-doctors\"\n            />\n            \n            <Select value={selectedSpecialty} onValueChange={setSelectedSpecialty}>\n              <SelectTrigger data-testid=\"select-specialty\">\n                <SelectValue placeholder=\"Select specialty\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Specialties</SelectItem>\n                {specialties.map((specialty) => (\n                  <SelectItem key={specialty} value={specialty}>{specialty}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setSearchTerm('');\n                setSelectedSpecialty('');\n              }}\n              data-testid=\"button-clear-filters\"\n            >\n              <i className=\"fas fa-times mr-2\"></i>\n              Clear Filters\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Online Status Filter */}\n      <div className=\"flex space-x-2 mb-6\">\n        <Badge variant=\"secondary\" className=\"cursor-pointer\">\n          <i className=\"fas fa-circle text-green-500 mr-1\"></i>\n          Online ({onlineDoctors?.filter((d: any) => d.isOnline).length || 0})\n        </Badge>\n        <Badge variant=\"outline\" className=\"cursor-pointer\">\n          <i className=\"fas fa-circle text-gray-400 mr-1\"></i>\n          All Doctors ({doctors?.length || 0})\n        </Badge>\n      </div>\n\n      {/* Doctors List */}\n      <div className=\"space-y-4\">\n        {filteredDoctors && filteredDoctors.length > 0 ? (\n          filteredDoctors.map((doctor: any) => (\n            <DoctorCard\n              key={doctor.id}\n              doctor={doctor}\n              onConsult={handleConsultDoctor}\n              onViewProfile={handleViewProfile}\n            />\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <i className=\"fas fa-user-md text-6xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">No Doctors Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || selectedSpecialty \n                  ? 'Try adjusting your search criteria'\n                  : 'No doctors are currently available'\n                }\n              </p>\n              {(searchTerm || selectedSpecialty) && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm('');\n                    setSelectedSpecialty('');\n                  }}\n                  data-testid=\"button-clear-search\"\n                >\n                  Clear Search\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Doctor Profile Modal */}\n      {selectedDoctor && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-2xl\">Dr. {selectedDoctor.user.name}</CardTitle>\n                  <p className=\"text-muted-foreground\">{selectedDoctor.specialty}</p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedDoctor(null)}\n                  data-testid=\"button-close-profile\"\n                >\n                  <i className=\"fas fa-times\"></i>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Professional Details</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <p><strong>Qualification:</strong> {selectedDoctor.qualification}</p>\n                    <p><strong>Experience:</strong> {selectedDoctor.experience}+ years</p>\n                    <p><strong>Rating:</strong> {(selectedDoctor.rating / 20).toFixed(1)}/5 ({selectedDoctor.totalRatings} reviews)</p>\n                    <p><strong>Consultation Fee:</strong> ₹{selectedDoctor.consultationFee}</p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Languages</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedDoctor.languages.map((lang: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\">{lang}</Badge>\n                    ))}\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <Badge \n                      className={selectedDoctor.isOnline ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}\n                    >\n                      <i className={`fas fa-circle mr-1 ${selectedDoctor.isOnline ? 'text-green-500' : 'text-gray-400'}`}></i>\n                      {selectedDoctor.isOnline ? 'Online' : 'Offline'}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                {selectedDoctor.isOnline ? (\n                  <Button\n                    className=\"flex-1\"\n                    onClick={() => handleConsultDoctor(selectedDoctor)}\n                    data-testid=\"button-start-consultation\"\n                  >\n                    <i className=\"fas fa-video mr-2\"></i>\n                    Start Video Consultation\n                  </Button>\n                ) : (\n                  <Button\n                    className=\"flex-1\"\n                    variant=\"outline\"\n                    onClick={() => handleBookAppointment(selectedDoctor)}\n                    data-testid=\"button-book-appointment\"\n                  >\n                    <i className=\"fas fa-calendar mr-2\"></i>\n                    Book Appointment\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSelectedDoctor(null)}\n                  data-testid=\"button-close-profile-footer\"\n                >\n                  Close\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10150},"client/src/pages/Home.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { auth } from '@/lib/firebase';\nimport { AppointmentCard } from '@/components/AppointmentCard';\nimport { DoctorCard } from '@/components/DoctorCard';\nimport { SymptomChecker } from '@/components/SymptomChecker';\nimport { VideoCall } from '@/components/VideoCall';\nimport { useToast } from '@/hooks/use-toast';\nimport { format } from 'date-fns';\n\nexport default function Home() {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [showSymptomChecker, setShowSymptomChecker] = useState(false);\n  const [activeVideoCall, setActiveVideoCall] = useState<string | null>(null);\n\n  // Use demo user if Firebase is not configured and no user is authenticated\n  const currentUser = user || (!auth ? {\n    id: 'demo-user',\n    name: 'Demo User',\n    email: 'demo@example.com',\n    role: 'patient' as const\n  } : null);\n\n  // Redirect to login if not authenticated and Firebase is configured\n  if (!currentUser) {\n    navigate('/login');\n    return null;\n  }\n\n  const { data: appointments } = useQuery({\n    queryKey: ['/api/appointments/patient', currentUser.id],\n  });\n\n  const { data: onlineDoctors } = useQuery({\n    queryKey: ['/api/doctors/online'],\n  });\n\n  const { data: healthRecords } = useQuery({\n    queryKey: ['/api/health-records/patient', currentUser.id],\n  });\n\n  const handleVideoConsultation = () => {\n    if (onlineDoctors && onlineDoctors.length > 0) {\n      const roomId = `consultation-${currentUser.id}-${Date.now()}`;\n      setActiveVideoCall(roomId);\n    } else {\n      toast({\n        title: \"No Doctors Available\",\n        description: \"No doctors are currently online for video consultation.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleSymptomChecker = () => {\n    setShowSymptomChecker(true);\n  };\n\n  const handleConsultDoctor = (doctor: any) => {\n    const roomId = `consultation-${currentUser.id}-${doctor.id}-${Date.now()}`;\n    setActiveVideoCall(roomId);\n  };\n\n  const handleJoinAppointment = (appointment: any) => {\n    const roomId = `appointment-${appointment.id}`;\n    setActiveVideoCall(roomId);\n  };\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return 'सुप्रभात'; // Good morning\n    if (hour < 17) return 'नमस्ते'; // Good afternoon\n    return 'शुभ संध्या'; // Good evening\n  };\n\n  const mockStats = {\n    nextAppointment: appointments?.length || 0,\n    doctorsOnline: onlineDoctors?.length || 0,\n    medicinesTracked: 5,\n    recordsSynced: healthRecords?.length || 0,\n  };\n\n  const mockVitals = {\n    bloodPressure: \"120/80\",\n    weight: \"68\",\n    glucose: \"95\",\n    heartRate: \"72\"\n  };\n\n  if (activeVideoCall) {\n    return (\n      <VideoCall\n        roomId={activeVideoCall}\n        onEnd={() => setActiveVideoCall(null)}\n      />\n    );\n  }\n\n  if (showSymptomChecker) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowSymptomChecker(false)}\n            data-testid=\"button-back-home\"\n          >\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            Back to Dashboard\n          </Button>\n        </div>\n        <SymptomChecker />\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n      {/* Welcome Section */}\n      <section className=\"mb-8\">\n        <div className=\"bg-gradient-to-r from-primary to-secondary text-primary-foreground rounded-lg p-6\">\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"greeting-user\">\n            {getGreeting()} {currentUser.name}!\n          </h2>\n          <p className=\"text-primary-foreground/90 mb-4\">आज आपका स्वास्थ्य कैसा है?</p>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-appointments\">{mockStats.nextAppointment}</div>\n              <div className=\"text-sm opacity-90\">{t('next-appointment')}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-doctors\">{mockStats.doctorsOnline}</div>\n              <div className=\"text-sm opacity-90\">{t('doctors-online')}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-medicines\">{mockStats.medicinesTracked}</div>\n              <div className=\"text-sm opacity-90\">{t('medicines-tracked')}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-records\">{mockStats.recordsSynced}</div>\n              <div className=\"text-sm opacity-90\">{t('records-synced')}</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Actions */}\n      <section className=\"mb-8\">\n        <h3 className=\"text-lg font-semibold mb-4\">{t('quick-services')} - Quick Services</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          \n          <button \n            className=\"bg-card hover:bg-accent border border-border rounded-lg p-6 text-left focus:ring-2 focus:ring-ring transition-colors\"\n            onClick={handleVideoConsultation}\n            data-testid=\"button-video-consultation\"\n          >\n            <div className=\"flex items-center mb-3\">\n              <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-lg flex items-center justify-center mr-3\">\n                <i className=\"fas fa-video text-xl\"></i>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">{t('video-consultation')}</h4>\n                <p className=\"text-sm text-muted-foreground\">Video Consultation</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">डॉक्टर से तुरंत बात करें</p>\n            <div className=\"mt-2 text-xs text-secondary font-medium\">\n              <i className=\"fas fa-circle mr-1 status-online\"></i>\n              {mockStats.doctorsOnline} doctors online\n            </div>\n          </button>\n\n          <button \n            className=\"bg-card hover:bg-accent border border-border rounded-lg p-6 text-left focus:ring-2 focus:ring-ring transition-colors\"\n            onClick={handleSymptomChecker}\n            data-testid=\"button-symptom-checker\"\n          >\n            <div className=\"flex items-center mb-3\">\n              <div className=\"w-12 h-12 bg-secondary text-secondary-foreground rounded-lg flex items-center justify-center mr-3\">\n                <i className=\"fas fa-stethoscope text-xl\"></i>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">{t('symptom-checker')}</h4>\n                <p className=\"text-sm text-muted-foreground\">Symptom Checker</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">AI से प्राथमिक जांच</p>\n            <div className=\"mt-2 text-xs text-muted-foreground\">\n              <i className=\"fas fa-robot mr-1\"></i>\n              AI-powered assistance\n            </div>\n          </button>\n\n          <button \n            className=\"bg-card hover:bg-accent border border-border rounded-lg p-6 text-left focus:ring-2 focus:ring-ring transition-colors\"\n            onClick={() => navigate('/records')}\n            data-testid=\"button-health-records\"\n          >\n            <div className=\"flex items-center mb-3\">\n              <div className=\"w-12 h-12 bg-accent text-accent-foreground rounded-lg flex items-center justify-center mr-3\">\n                <i className=\"fas fa-file-medical text-xl\"></i>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">{t('health-records')}</h4>\n                <p className=\"text-sm text-muted-foreground\">Health Records</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">अपनी मेडिकल हिस्ट्री देखें</p>\n            <div className=\"mt-2 text-xs text-secondary font-medium\">\n              <i className=\"fas fa-download mr-1\"></i>\n              Offline ready\n            </div>\n          </button>\n\n          <button \n            className=\"bg-card hover:bg-accent border border-border rounded-lg p-6 text-left focus:ring-2 focus:ring-ring transition-colors\"\n            onClick={() => navigate('/medicines')}\n            data-testid=\"button-medicine-availability\"\n          >\n            <div className=\"flex items-center mb-3\">\n              <div className=\"w-12 h-12 bg-muted text-muted-foreground rounded-lg flex items-center justify-center mr-3\">\n                <i className=\"fas fa-pills text-xl\"></i>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">{t('medicine-availability')}</h4>\n                <p className=\"text-sm text-muted-foreground\">Medicine Stock</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">फार्मेसी में दवा जांचें</p>\n            <div className=\"mt-2 text-xs text-secondary font-medium\">\n              <i className=\"fas fa-sync-alt mr-1\"></i>\n              Live updates\n            </div>\n          </button>\n        </div>\n      </section>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        \n        {/* Left Column */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          \n          {/* Upcoming Appointments */}\n          <section className=\"bg-card border border-border rounded-lg p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">{t('upcoming-appointments')} - Upcoming Appointments</h3>\n              <button \n                className=\"text-primary text-sm font-medium hover:underline\"\n                onClick={() => navigate('/profile')}\n                data-testid=\"button-view-all-appointments\"\n              >\n                {t('view-all')}\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {appointments && appointments.length > 0 ? (\n                appointments.slice(0, 2).map((appointment: any) => (\n                  <AppointmentCard\n                    key={appointment.id}\n                    appointment={appointment}\n                    onJoin={handleJoinAppointment}\n                  />\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-calendar-plus text-4xl text-muted-foreground mb-4\"></i>\n                  <h4 className=\"font-medium mb-2\">No Upcoming Appointments</h4>\n                  <p className=\"text-muted-foreground text-sm mb-4\">\n                    Book your first consultation with our online doctors\n                  </p>\n                  <Button onClick={() => navigate('/doctors')} data-testid=\"button-book-first-appointment\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Book Appointment\n                  </Button>\n                </div>\n              )}\n            </div>\n            \n            <Button \n              className=\"w-full mt-4\" \n              onClick={() => navigate('/doctors')}\n              data-testid=\"button-book-new-appointment\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              {t('book-appointment')}\n            </Button>\n          </section>\n\n          {/* Health Records Summary */}\n          <section className=\"bg-card border border-border rounded-lg p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">{t('health-summary')} - Health Summary</h3>\n              <div className=\"flex items-center text-sm text-secondary\">\n                <i className=\"fas fa-sync-alt mr-1\"></i>\n                Synced 2 min ago\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"vital-blood-pressure\">{mockVitals.bloodPressure}</div>\n                <div className=\"text-sm text-muted-foreground\">Blood Pressure</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-secondary\" data-testid=\"vital-weight\">{mockVitals.weight}kg</div>\n                <div className=\"text-sm text-muted-foreground\">Weight</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-accent-foreground\" data-testid=\"vital-glucose\">{mockVitals.glucose}mg/dL</div>\n                <div className=\"text-sm text-muted-foreground\">Glucose</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-muted-foreground\" data-testid=\"vital-heart-rate\">{mockVitals.heartRate}bpm</div>\n                <div className=\"text-sm text-muted-foreground\">Heart Rate</div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">हालिया रिपोर्ट्स - Recent Reports</h4>\n              {healthRecords && healthRecords.length > 0 ? (\n                healthRecords.slice(0, 2).map((record: any) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 bg-accent rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-file-pdf text-destructive mr-3\"></i>\n                      <div>\n                        <p className=\"font-medium\">{record.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(new Date(record.createdAt), 'MMM dd, yyyy')}\n                        </p>\n                      </div>\n                    </div>\n                    <button \n                      className=\"text-primary text-sm font-medium hover:underline\"\n                      onClick={() => navigate('/records')}\n                      data-testid={`button-view-record-${record.id}`}\n                    >\n                      View\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-muted-foreground text-sm\">No recent reports available</p>\n                </div>\n              )}\n            </div>\n          </section>\n        </div>\n\n        {/* Right Column */}\n        <div className=\"space-y-6\">\n          \n          {/* Online Doctors */}\n          <section className=\"bg-card border border-border rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t('available-doctors')} - Available Doctors</h3>\n            \n            <div className=\"space-y-4\">\n              {onlineDoctors && onlineDoctors.length > 0 ? (\n                onlineDoctors.slice(0, 3).map((doctor: any) => (\n                  <DoctorCard\n                    key={doctor.id}\n                    doctor={doctor}\n                    onConsult={handleConsultDoctor}\n                    onViewProfile={() => navigate('/doctors')}\n                  />\n                ))\n              ) : (\n                <div className=\"text-center py-6\">\n                  <i className=\"fas fa-user-md text-3xl text-muted-foreground mb-3\"></i>\n                  <p className=\"text-muted-foreground text-sm\">No doctors currently online</p>\n                </div>\n              )}\n            </div>\n\n            <button \n              className=\"w-full mt-4 text-primary text-sm font-medium py-2 border border-border rounded-md hover:bg-muted\"\n              onClick={() => navigate('/doctors')}\n              data-testid=\"button-view-all-doctors\"\n            >\n              {t('view-all')} - View All Doctors\n            </button>\n          </section>\n\n          {/* Emergency Services */}\n          <section className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-destructive mb-4\">{t('emergency-services')} - Emergency</h3>\n            \n            <div className=\"space-y-3\">\n              <Button\n                variant=\"destructive\"\n                className=\"w-full\"\n                onClick={() => window.open('tel:108', '_self')}\n                data-testid=\"button-call-108\"\n              >\n                <i className=\"fas fa-ambulance mr-2\"></i>\n                108 - Ambulance\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                className=\"w-full border-destructive/20 text-destructive hover:bg-destructive/5\"\n                onClick={() => window.open('tel:01763222204', '_self')}\n                data-testid=\"button-call-civil-hospital\"\n              >\n                <i className=\"fas fa-hospital mr-2\"></i>\n                Civil Hospital Nabha\n              </Button>\n              \n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground\">24x7 Emergency Support</p>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n","size_bytes":18157},"client/src/pages/Login.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { login } from '@/lib/firebase';\n\nexport default function Login() {\n  const { user, loading } = useAuth();\n  const { t } = useLanguage();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (user && !loading) {\n      navigate('/');\n    }\n  }, [user, loading, navigate]);\n\n  const handleGoogleLogin = () => {\n    login();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-primary mb-4\"></i>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mb-4\">\n            <h1 className=\"text-3xl font-bold text-primary\" data-testid=\"app-title\">\n              <i className=\"fas fa-heartbeat mr-2\"></i>\n              सेहत नाभा\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">Sehat Nabha</p>\n          </div>\n          <CardTitle className=\"text-xl\">Welcome to Rural Healthcare</CardTitle>\n          <p className=\"text-muted-foreground\">\n            Connect with doctors, manage health records, and access medicines from anywhere\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <i className=\"fas fa-video text-2xl text-primary mb-2\"></i>\n              <p className=\"text-xs\">Video Consults</p>\n            </div>\n            <div>\n              <i className=\"fas fa-file-medical text-2xl text-secondary mb-2\"></i>\n              <p className=\"text-xs\">Health Records</p>\n            </div>\n            <div>\n              <i className=\"fas fa-pills text-2xl text-accent-foreground mb-2\"></i>\n              <p className=\"text-xs\">Medicine Tracker</p>\n            </div>\n          </div>\n\n          <Button \n            onClick={handleGoogleLogin}\n            className=\"w-full\"\n            size=\"lg\"\n            data-testid=\"button-google-login\"\n          >\n            <i className=\"fab fa-google mr-2\"></i>\n            Continue with Google\n          </Button>\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Secure login powered by Firebase Authentication\n            </p>\n          </div>\n\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <h4 className=\"font-medium mb-2 text-center\">Multilingual Support</h4>\n            <div className=\"flex justify-center space-x-4 text-sm\">\n              <span>हिंदी</span>\n              <span>ਪੰਜਾਬੀ</span>\n              <span>English</span>\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              By continuing, you agree to our Terms of Service and Privacy Policy\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3537},"client/src/pages/Medicines.tsx":{"content":"import { MedicineTracker } from '@/components/MedicineTracker';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\n\nexport default function Medicines() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n\n  if (!user) {\n    navigate('/login');\n    return null;\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Medicine Availability</h1>\n        <p className=\"text-muted-foreground\">\n          Track medicine stock in nearby pharmacies with live updates\n        </p>\n      </div>\n      \n      <MedicineTracker />\n    </div>\n  );\n}\n","size_bytes":695},"client/src/pages/Profile.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { AppointmentCard } from '@/components/AppointmentCard';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Profile() {\n  const { user, signOut } = useAuth();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    phone: user?.phone || '',\n  });\n\n  if (!user) {\n    navigate('/login');\n    return null;\n  }\n\n  const { data: appointments } = useQuery({\n    queryKey: ['/api/appointments/patient', user.id],\n  });\n\n  const { data: symptomChecks } = useQuery({\n    queryKey: ['/api/symptom-checks/patient', user.id],\n  });\n\n  const handleSaveProfile = () => {\n    // TODO: Implement profile update\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile information has been saved.\",\n    });\n    setIsEditing(false);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const getAppointmentStats = () => {\n    if (!appointments) return { total: 0, upcoming: 0, completed: 0 };\n    \n    const total = appointments.length;\n    const upcoming = appointments.filter((apt: any) => apt.status === 'scheduled').length;\n    const completed = appointments.filter((apt: any) => apt.status === 'completed').length;\n    \n    return { total, upcoming, completed };\n  };\n\n  const stats = getAppointmentStats();\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        \n        {/* Profile Information */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                {t('profile')}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsEditing(!isEditing)}\n                  data-testid=\"button-edit-profile\"\n                >\n                  <i className=\"fas fa-edit\"></i>\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                  <AvatarImage src={user.profilePicture || undefined} alt={user.name} />\n                  <AvatarFallback className=\"text-2xl\">\n                    {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-xl font-semibold\" data-testid=\"text-user-name\">{user.name}</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">{user.email}</p>\n                <Badge variant=\"secondary\" className=\"mt-2\">\n                  {user.role === 'patient' ? 'Patient' : 'Doctor'}\n                </Badge>\n              </div>\n\n              {isEditing ? (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      data-testid=\"input-edit-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      placeholder=\"+91 XXXXX XXXXX\"\n                      data-testid=\"input-edit-phone\"\n                    />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button onClick={handleSaveProfile} className=\"flex-1\" data-testid=\"button-save-profile\">\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => setIsEditing(false)} data-testid=\"button-cancel-edit\">\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Phone</Label>\n                    <p className=\"text-sm\" data-testid=\"text-user-phone\">\n                      {user.phone || 'Not provided'}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Member Since</Label>\n                    <p className=\"text-sm\">\n                      {new Date(user.createdAt || Date.now()).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"pt-4 border-t\">\n                <Button\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                  onClick={handleLogout}\n                  data-testid=\"button-logout\"\n                >\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Logout\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Healthcare Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total-appointments\">{stats.total}</div>\n                  <div className=\"text-xs text-muted-foreground\">Total Appointments</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-upcoming-appointments\">{stats.upcoming}</div>\n                  <div className=\"text-xs text-muted-foreground\">Upcoming</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-accent-foreground\" data-testid=\"stat-symptom-checks\">{symptomChecks?.length || 0}</div>\n                  <div className=\"text-xs text-muted-foreground\">AI Checks</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Appointments and History */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          \n          {/* Recent Appointments */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Recent Appointments\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => navigate('/doctors')}\n                  data-testid=\"button-book-new\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Book New\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {appointments && appointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {appointments.slice(0, 5).map((appointment: any) => (\n                    <AppointmentCard\n                      key={appointment.id}\n                      appointment={appointment}\n                      onJoin={(apt) => navigate(`/video/appointment-${apt.id}`)}\n                    />\n                  ))}\n                  {appointments.length > 5 && (\n                    <div className=\"text-center pt-4\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        View All Appointments ({appointments.length})\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-calendar-plus text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-medium mb-2\">No Appointments Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Book your first consultation with our qualified doctors\n                  </p>\n                  <Button onClick={() => navigate('/doctors')} data-testid=\"button-book-first\">\n                    Book First Appointment\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent AI Symptom Checks */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent AI Health Checks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {symptomChecks && symptomChecks.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {symptomChecks.slice(0, 3).map((check: any) => (\n                    <div key={check.id} className=\"p-4 border rounded-lg\" data-testid={`symptom-check-${check.id}`}>\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h4 className=\"font-medium\">Symptom Analysis</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(check.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge\n                          className={\n                            check.severity === 'emergency' ? 'bg-red-100 text-red-800' :\n                            check.severity === 'high' ? 'bg-orange-100 text-orange-800' :\n                            check.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-green-100 text-green-800'\n                          }\n                        >\n                          {check.severity}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm\">\n                        <p><strong>Symptoms:</strong> {check.symptoms.join(', ')}</p>\n                        <p className=\"mt-1\"><strong>Assessment:</strong> {check.aiResponse.possibleConditions[0]}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-6\">\n                  <i className=\"fas fa-stethoscope text-3xl text-muted-foreground mb-3\"></i>\n                  <p className=\"text-muted-foreground\">No AI health checks performed yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16\"\n                  onClick={() => navigate('/records')}\n                  data-testid=\"button-view-records\"\n                >\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-file-medical text-xl mb-1\"></i>\n                    <div className=\"text-sm\">Health Records</div>\n                  </div>\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"h-16\"\n                  onClick={() => navigate('/medicines')}\n                  data-testid=\"button-track-medicines\"\n                >\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-pills text-xl mb-1\"></i>\n                    <div className=\"text-sm\">Track Medicines</div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12740},"client/src/pages/Records.tsx":{"content":"import { HealthRecords } from '@/components/HealthRecords';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\n\nexport default function Records() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n\n  if (!user) {\n    navigate('/login');\n    return null;\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n      <HealthRecords />\n    </div>\n  );\n}\n","size_bytes":434},"client/src/pages/VideoConsultation.tsx":{"content":"import { useParams } from 'wouter';\nimport { VideoCall } from '@/components/VideoCall';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\n\nexport default function VideoConsultation() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const params = useParams();\n  const roomId = params.roomId;\n\n  if (!user) {\n    navigate('/login');\n    return null;\n  }\n\n  if (!roomId) {\n    navigate('/');\n    return null;\n  }\n\n  return (\n    <VideoCall\n      roomId={roomId}\n      onEnd={() => navigate('/')}\n    />\n  );\n}\n","size_bytes":569},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}